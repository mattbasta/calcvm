PROGRAM MID LINK BEFORE BACKPATCHING:
0*	FUNCTION outermost scope	***************
0:	STEP_CONST
1:	1
2:	STEP_CONST
3:	4
4:	STEP_CONST
5:	3
6:	STEP_ALLOC
7:	STEP_CONST
8:	1
9:	STEP_OVER
10:	STEP_CONST
11:	0
12:	STEP_ADD
13:	STEP_STORE
14:	STEP_CONST
15:	2.0
16:	STEP_CAST_INT
17:	STEP_OVER
18:	STEP_CONST
19:	1
20:	STEP_ADD
21:	STEP_STORE
22:	STEP_CONST
23:	3
24:	STEP_MINUS
25:	STEP_OVER
26:	STEP_CONST
27:	2
28:	STEP_ADD
29:	STEP_STORE
30:	STEP_CONST
31:	0
32:	STEP_ALLOC
33:	STEP_PUSH_FP
34:	STEP_CONST
35:	1
36:	STEP_ADD
37:	STEP_FETCH_STACK
38:	STEP_DUP
39:	STEP_CONST
40:	1
41:	STEP_REFCNT
42:	STEP_DROP
43:	STEP_PUSH_FP
44:	STEP_CONST
45:	2
46:	STEP_ADD
47:	STEP_FETCH_STACK
48:	STEP_DUP
49:	STEP_CONST
50:	1
51:	STEP_REFCNT
52:	STEP_DROP
53:	STEP_OVER
54:	STEP_OVER
55:	STEP_CONST
56:	0
57:	STEP_ARRAYCAT
58:	STEP_SWAP2
59:	STEP_CONST
60:	-1
61:	STEP_REFCNT
62:	STEP_DROP
63:	STEP_CONST
64:	-1
65:	STEP_REFCNT
66:	STEP_DROP
67:	STEP_PUSH_FP
68:	STEP_CONST
69:	1
70:	STEP_ADD
71:	STEP_FETCH_STACK
72:	STEP_DUP
73:	STEP_CONST
74:	1
75:	STEP_REFCNT
76:	STEP_DROP
77:	STEP_PUSH_FP
78:	STEP_CONST
79:	3
80:	STEP_ADD
81:	STEP_FETCH_STACK
82:	STEP_DUP
83:	STEP_CONST
84:	1
85:	STEP_REFCNT
86:	STEP_DROP
87:	STEP_OVER
88:	STEP_OVER
89:	STEP_CONST
90:	0
91:	STEP_ARRAYCAT
92:	STEP_SWAP2
93:	STEP_CONST
94:	-1
95:	STEP_REFCNT
96:	STEP_DROP
97:	STEP_CONST
98:	-1
99:	STEP_REFCNT
100:	STEP_DROP
101:	STEP_CONST
102:	2
103:	STEP_ALLOC
104:	STEP_PUSH_FP
105:	STEP_CONST
106:	0
107:	STEP_ADD
108:	STEP_FETCH_STACK
109:	STEP_OVER
110:	STEP_CONST
111:	0
112:	STEP_ADD
113:	STEP_STORE
114:	STEP_CONST
115:	1
116:	STEP_OVER
117:	STEP_CONST
118:	1
119:	STEP_ADD
120:	STEP_STORE
121:	STEP_OVER
122:	STEP_OVER
123:	STEP_CONST
124:	0
125:	STEP_ARRAYCAT
126:	STEP_SWAP2
127:	STEP_CONST
128:	-1
129:	STEP_REFCNT
130:	STEP_DROP
131:	STEP_CONST
132:	-1
133:	STEP_REFCNT
134:	STEP_DROP
135:	STEP_CONST
136:	0
137:	STEP_ALLOC
138:	STEP_OVER
139:	STEP_OVER
140:	STEP_CONST
141:	0
142:	STEP_ARRAYCAT
143:	STEP_SWAP2
144:	STEP_CONST
145:	-1
146:	STEP_REFCNT
147:	STEP_DROP
148:	STEP_CONST
149:	-1
150:	STEP_REFCNT
151:	STEP_DROP
152:	STEP_CONST
153:	3
154:	STEP_ALLOC
155:	STEP_CONST
156:	1.0
157:	STEP_OVER
158:	STEP_CONST
159:	0
160:	STEP_ADD
161:	STEP_STORE
162:	STEP_CONST
163:	2.5
164:	STEP_MINUS
165:	STEP_OVER
166:	STEP_CONST
167:	1
168:	STEP_ADD
169:	STEP_STORE
170:	STEP_CONST
171:	3
172:	STEP_CAST_FLOAT
173:	STEP_OVER
174:	STEP_CONST
175:	2
176:	STEP_ADD
177:	STEP_STORE
178:	STEP_CONST
179:	0
180:	STEP_ALLOC
181:	STEP_PUSH_FP
182:	STEP_CONST
183:	6
184:	STEP_ADD
185:	STEP_FETCH_STACK
186:	STEP_DUP
187:	STEP_CONST
188:	1
189:	STEP_REFCNT
190:	STEP_DROP
191:	STEP_PUSH_FP
192:	STEP_CONST
193:	1
194:	STEP_ADD
195:	STEP_FETCH_STACK
196:	STEP_DUP
197:	STEP_CONST
198:	1
199:	STEP_REFCNT
200:	STEP_DROP
201:	STEP_OVER
202:	STEP_OVER
203:	STEP_CONST
204:	1
205:	STEP_ARRAYCAT
206:	STEP_SWAP2
207:	STEP_CONST
208:	-1
209:	STEP_REFCNT
210:	STEP_DROP
211:	STEP_CONST
212:	-1
213:	STEP_REFCNT
214:	STEP_DROP
215:	STEP_DUP
216:	STEP_CONST
217:	-1
218:	STEP_ARRAYCPY
219:	STEP_SWAP
220:	STEP_CONST
221:	-1
222:	STEP_REFCNT
223:	STEP_DROP
224:	STEP_PUSH_FP
225:	STEP_CONST
226:	6
227:	STEP_ADD
228:	STEP_FETCH_STACK
229:	STEP_DUP
230:	STEP_CONST
231:	1
232:	STEP_REFCNT
233:	STEP_DROP
234:	STEP_PUSH_FP
235:	STEP_CONST
236:	1
237:	STEP_ADD
238:	STEP_FETCH_STACK
239:	STEP_DUP
240:	STEP_CONST
241:	1
242:	STEP_REFCNT
243:	STEP_DROP
244:	STEP_OVER
245:	STEP_OVER
246:	STEP_CONST
247:	1
248:	STEP_ARRAYCAT
249:	STEP_SWAP2
250:	STEP_CONST
251:	-1
252:	STEP_REFCNT
253:	STEP_DROP
254:	STEP_CONST
255:	-1
256:	STEP_REFCNT
257:	STEP_DROP
258:	STEP_CONST
259:	test 1
260:	STEP_PRINT
261:	STEP_CRLF
262:	STEP_PUSH_FP
263:	STEP_CONST
264:	1
265:	STEP_ADD
266:	STEP_FETCH_STACK
267:	STEP_CONST
268:	1
269:	STEP_ADD
270:	STEP_FETCH
271:	STEP_PRINT
272:	STEP_CRLF
273:	STEP_CONST
274:	test iarray1
275:	STEP_PUSH_FP
276:	STEP_CONST
277:	1
278:	STEP_ADD
279:	STEP_FETCH_STACK
280:	STEP_DUP
281:	STEP_CONST
282:	1
283:	STEP_REFCNT
284:	STEP_DROP
285:	STEP_CONST
286:	0
287:	STEP_PUSH_FP
288:	STEP_CALL_SECONDARY
289:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'printfarray': ['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {...}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637]
290:	STEP_PRINT
291:	STEP_CRLF
292:	STEP_CONST
293:	test iarray2
294:	STEP_PUSH_FP
295:	STEP_CONST
296:	2
297:	STEP_ADD
298:	STEP_FETCH_STACK
299:	STEP_DUP
300:	STEP_CONST
301:	1
302:	STEP_REFCNT
303:	STEP_DROP
304:	STEP_CONST
305:	0
306:	STEP_PUSH_FP
307:	STEP_CALL_SECONDARY
308:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'printfarray': ['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {...}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637]
309:	STEP_PRINT
310:	STEP_CRLF
311:	STEP_CONST
312:	test iarray3
313:	STEP_PUSH_FP
314:	STEP_CONST
315:	3
316:	STEP_ADD
317:	STEP_FETCH_STACK
318:	STEP_DUP
319:	STEP_CONST
320:	1
321:	STEP_REFCNT
322:	STEP_DROP
323:	STEP_CONST
324:	0
325:	STEP_PUSH_FP
326:	STEP_CALL_SECONDARY
327:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'printfarray': ['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {...}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637]
328:	STEP_PRINT
329:	STEP_CRLF
330:	STEP_CONST
331:	test farray1
332:	STEP_PUSH_FP
333:	STEP_CONST
334:	6
335:	STEP_ADD
336:	STEP_FETCH_STACK
337:	STEP_DUP
338:	STEP_CONST
339:	1
340:	STEP_REFCNT
341:	STEP_DROP
342:	STEP_CONST
343:	0
344:	STEP_PUSH_FP
345:	STEP_CALL_SECONDARY
346:	['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {'printiarray': ['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {...}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637], 'printfarray': [...], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509]
347:	STEP_PRINT
348:	STEP_CRLF
349:	STEP_CONST
350:	test farray2
351:	STEP_PUSH_FP
352:	STEP_CONST
353:	7
354:	STEP_ADD
355:	STEP_FETCH_STACK
356:	STEP_DUP
357:	STEP_CONST
358:	1
359:	STEP_REFCNT
360:	STEP_DROP
361:	STEP_CONST
362:	0
363:	STEP_PUSH_FP
364:	STEP_CALL_SECONDARY
365:	['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {'printiarray': ['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {...}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637], 'printfarray': [...], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509]
366:	STEP_PRINT
367:	STEP_CRLF
368:	STEP_CONST
369:	test i farray1
370:	STEP_PUSH_FP
371:	STEP_CONST
372:	6
373:	STEP_ADD
374:	STEP_FETCH_STACK
375:	STEP_DUP
376:	STEP_CONST
377:	1
378:	STEP_REFCNT
379:	STEP_DROP
380:	STEP_DUP
381:	STEP_CONST
382:	-1
383:	STEP_ARRAYCPY
384:	STEP_SWAP
385:	STEP_CONST
386:	-1
387:	STEP_REFCNT
388:	STEP_DROP
389:	STEP_CONST
390:	0
391:	STEP_PUSH_FP
392:	STEP_CALL_SECONDARY
393:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'printfarray': ['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {...}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637]
394:	STEP_PRINT
395:	STEP_CRLF
396:	STEP_CONST
397:	test i farray2
398:	STEP_PUSH_FP
399:	STEP_CONST
400:	7
401:	STEP_ADD
402:	STEP_FETCH_STACK
403:	STEP_DUP
404:	STEP_CONST
405:	1
406:	STEP_REFCNT
407:	STEP_DROP
408:	STEP_DUP
409:	STEP_CONST
410:	-1
411:	STEP_ARRAYCPY
412:	STEP_SWAP
413:	STEP_CONST
414:	-1
415:	STEP_REFCNT
416:	STEP_DROP
417:	STEP_CONST
418:	0
419:	STEP_PUSH_FP
420:	STEP_CALL_SECONDARY
421:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'printfarray': ['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {...}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637]
422:	STEP_PRINT
423:	STEP_CRLF
424:	STEP_CONST
425:	test f iarray1
426:	STEP_PUSH_FP
427:	STEP_CONST
428:	1
429:	STEP_ADD
430:	STEP_FETCH_STACK
431:	STEP_DUP
432:	STEP_CONST
433:	1
434:	STEP_REFCNT
435:	STEP_DROP
436:	STEP_DUP
437:	STEP_CONST
438:	1
439:	STEP_ARRAYCPY
440:	STEP_SWAP
441:	STEP_CONST
442:	-1
443:	STEP_REFCNT
444:	STEP_DROP
445:	STEP_CONST
446:	0
447:	STEP_PUSH_FP
448:	STEP_CALL_SECONDARY
449:	['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {'printiarray': ['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {...}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637], 'printfarray': [...], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509]
450:	STEP_PRINT
451:	STEP_CRLF
452:	STEP_CONST
453:	test f iarray2
454:	STEP_PUSH_FP
455:	STEP_CONST
456:	2
457:	STEP_ADD
458:	STEP_FETCH_STACK
459:	STEP_DUP
460:	STEP_CONST
461:	1
462:	STEP_REFCNT
463:	STEP_DROP
464:	STEP_DUP
465:	STEP_CONST
466:	1
467:	STEP_ARRAYCPY
468:	STEP_SWAP
469:	STEP_CONST
470:	-1
471:	STEP_REFCNT
472:	STEP_DROP
473:	STEP_CONST
474:	0
475:	STEP_PUSH_FP
476:	STEP_CALL_SECONDARY
477:	['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {'printiarray': ['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {...}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637], 'printfarray': [...], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509]
478:	STEP_PRINT
479:	STEP_CRLF
480:	STEP_CONST
481:	test f iarray3
482:	STEP_PUSH_FP
483:	STEP_CONST
484:	3
485:	STEP_ADD
486:	STEP_FETCH_STACK
487:	STEP_DUP
488:	STEP_CONST
489:	1
490:	STEP_REFCNT
491:	STEP_DROP
492:	STEP_DUP
493:	STEP_CONST
494:	1
495:	STEP_ARRAYCPY
496:	STEP_SWAP
497:	STEP_CONST
498:	-1
499:	STEP_REFCNT
500:	STEP_DROP
501:	STEP_CONST
502:	0
503:	STEP_PUSH_FP
504:	STEP_CALL_SECONDARY
505:	['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {'printiarray': ['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {...}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637], 'printfarray': [...], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509]
506:	STEP_PRINT
507:	STEP_CRLF
508:	STEP_PAUSE
509*	FUNCTION outer scope::printfarray	***************
509:	STEP_PUSH_FP
510:	STEP_CONST
511:	-2
512:	STEP_ADD
513:	STEP_FETCH_STACK
514:	STEP_CONST
515:	1
516:	STEP_MINUS
517:	STEP_GT
518:	STEP_DUP
519:	STEP_GOTO0
520:	(26,)
521:	STEP_DROP
522:	STEP_PUSH_FP
523:	STEP_CONST
524:	-2
525:	STEP_ADD
526:	STEP_FETCH_STACK
527:	STEP_PUSH_FP
528:	STEP_CONST
529:	-3
530:	STEP_ADD
531:	STEP_FETCH_STACK
532:	STEP_DUP
533:	STEP_CONST
534:	1
535:	STEP_REFCNT
536:	STEP_DROP
537:	STEP_DUP
538:	STEP_SUB1
539:	STEP_FETCH
540:	STEP_SWAP
541:	STEP_CONST
542:	-1
543:	STEP_REFCNT
544:	STEP_DROP
545:	STEP_LT
546:	STEP_GOTO0
547:	(64,)
548:	STEP_PUSH_FP
549:	STEP_CONST
550:	-4
551:	STEP_ADD
552:	STEP_FETCH_STACK
553:	STEP_CONST
554:	 
555:	STEP_ADD
556:	STEP_PUSH_FP
557:	STEP_CONST
558:	-3
559:	STEP_ADD
560:	STEP_FETCH_STACK
561:	STEP_PUSH_FP
562:	STEP_CONST
563:	-2
564:	STEP_ADD
565:	STEP_FETCH_STACK
566:	STEP_ADD
567:	STEP_FETCH
568:	STEP_CAST_STRING
569:	STEP_ADD
570:	STEP_PUSH_FP
571:	STEP_CONST
572:	-3
573:	STEP_ADD
574:	STEP_FETCH_STACK
575:	STEP_DUP
576:	STEP_CONST
577:	1
578:	STEP_REFCNT
579:	STEP_DROP
580:	STEP_PUSH_FP
581:	STEP_CONST
582:	-2
583:	STEP_ADD
584:	STEP_FETCH_STACK
585:	STEP_CONST
586:	1
587:	STEP_ADD
588:	STEP_PUSH_FP
589:	STEP_CONST
590:	-1
591:	STEP_ADD
592:	STEP_FETCH_STACK
593:	STEP_PUSH_FP
594:	STEP_CONST
595:	-3
596:	STEP_ADD
597:	STEP_FETCH_STACK
598:	STEP_CONST
599:	-1
600:	STEP_REFCNT
601:	STEP_DROP
602:	STEP_CONST
603:	-4
604:	STEP_CONST
605:	-1
606:	STEP_DROPFRAME
607:	STEP_GOTO
608:	['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {'printiarray': ['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {...}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637], 'printfarray': [...], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509]
609:	STEP_GOTO
610:	(6,)
611:	STEP_PUSH_FP
612:	STEP_CONST
613:	-4
614:	STEP_ADD
615:	STEP_FETCH_STACK
616:	STEP_CONST
617:	0
618:	STEP_STORE
619:	STEP_PUSH_FP
620:	STEP_CONST
621:	-3
622:	STEP_ADD
623:	STEP_FETCH_STACK
624:	STEP_CONST
625:	-1
626:	STEP_REFCNT
627:	STEP_DROP
628:	STEP_CONST
629:	-4
630:	STEP_CONST
631:	-1
632:	STEP_DROPFRAME
633:	STEP_CONST
634:	0
635:	STEP_FETCH
636:	STEP_RETURN
637*	FUNCTION outer scope::printiarray	***************
637:	STEP_PUSH_FP
638:	STEP_CONST
639:	-2
640:	STEP_ADD
641:	STEP_FETCH_STACK
642:	STEP_CONST
643:	1
644:	STEP_MINUS
645:	STEP_GT
646:	STEP_DUP
647:	STEP_GOTO0
648:	(26,)
649:	STEP_DROP
650:	STEP_PUSH_FP
651:	STEP_CONST
652:	-2
653:	STEP_ADD
654:	STEP_FETCH_STACK
655:	STEP_PUSH_FP
656:	STEP_CONST
657:	-3
658:	STEP_ADD
659:	STEP_FETCH_STACK
660:	STEP_DUP
661:	STEP_CONST
662:	1
663:	STEP_REFCNT
664:	STEP_DROP
665:	STEP_DUP
666:	STEP_SUB1
667:	STEP_FETCH
668:	STEP_SWAP
669:	STEP_CONST
670:	-1
671:	STEP_REFCNT
672:	STEP_DROP
673:	STEP_LT
674:	STEP_GOTO0
675:	(64,)
676:	STEP_PUSH_FP
677:	STEP_CONST
678:	-4
679:	STEP_ADD
680:	STEP_FETCH_STACK
681:	STEP_CONST
682:	 
683:	STEP_ADD
684:	STEP_PUSH_FP
685:	STEP_CONST
686:	-3
687:	STEP_ADD
688:	STEP_FETCH_STACK
689:	STEP_PUSH_FP
690:	STEP_CONST
691:	-2
692:	STEP_ADD
693:	STEP_FETCH_STACK
694:	STEP_ADD
695:	STEP_FETCH
696:	STEP_CAST_STRING
697:	STEP_ADD
698:	STEP_PUSH_FP
699:	STEP_CONST
700:	-3
701:	STEP_ADD
702:	STEP_FETCH_STACK
703:	STEP_DUP
704:	STEP_CONST
705:	1
706:	STEP_REFCNT
707:	STEP_DROP
708:	STEP_PUSH_FP
709:	STEP_CONST
710:	-2
711:	STEP_ADD
712:	STEP_FETCH_STACK
713:	STEP_CONST
714:	1
715:	STEP_ADD
716:	STEP_PUSH_FP
717:	STEP_CONST
718:	-1
719:	STEP_ADD
720:	STEP_FETCH_STACK
721:	STEP_PUSH_FP
722:	STEP_CONST
723:	-3
724:	STEP_ADD
725:	STEP_FETCH_STACK
726:	STEP_CONST
727:	-1
728:	STEP_REFCNT
729:	STEP_DROP
730:	STEP_CONST
731:	-4
732:	STEP_CONST
733:	-1
734:	STEP_DROPFRAME
735:	STEP_GOTO
736:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'printfarray': ['func', 'printfarray', 'string', (('prefix', ('typedecl', 'string')), ('farray', ('typedecl', 'float[]')), ('i', ('typedecl', 'int'))), {'printfarray': ('symref', 'printfarray', 1, {...}), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3, 'farray': ('var', 'farray', 'float[]', -3)}, 509], 'farray1': ('var', 'farray1', 'float[]', 6), '#funcs': 2, 'iarray6': ('var', 'iarray6', 'int[]', 8), '#locals': 10, 'farray3': ('var', 'farray3', 'float[]', 9), '#depth': 0, 'iarray5': ('var', 'iarray5', 'int[]', 5), 'i': ('var', 'i', 'int', 0), '#params': 0, 'iarray4': ('var', 'iarray4', 'int[]', 4), 'iarray3': ('var', 'iarray3', 'int[]', 3), 'iarray2': ('var', 'iarray2', 'int[]', 2), 'iarray1': ('var', 'iarray1', 'int[]', 1), 'farray2': ('var', 'farray2', 'float[]', 7)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 637]
737:	STEP_GOTO
738:	(6,)
739:	STEP_PUSH_FP
740:	STEP_CONST
741:	-4
742:	STEP_ADD
743:	STEP_FETCH_STACK
744:	STEP_CONST
745:	0
746:	STEP_STORE
747:	STEP_PUSH_FP
748:	STEP_CONST
749:	-3
750:	STEP_ADD
751:	STEP_FETCH_STACK
752:	STEP_CONST
753:	-1
754:	STEP_REFCNT
755:	STEP_DROP
756:	STEP_CONST
757:	-4
758:	STEP_CONST
759:	-1
760:	STEP_DROPFRAME
761:	STEP_CONST
762:	0
763:	STEP_FETCH
764:	STEP_RETURN
PROGRAM LINK AFTER BACKPATCHING:
0*	FUNCTION outermost scope	***************
0:	STEP_CONST
1:	1
2:	STEP_CONST
3:	4
4:	STEP_CONST
5:	3
6:	STEP_ALLOC
7:	STEP_CONST
8:	1
9:	STEP_OVER
10:	STEP_CONST
11:	0
12:	STEP_ADD
13:	STEP_STORE
14:	STEP_CONST
15:	2.0
16:	STEP_CAST_INT
17:	STEP_OVER
18:	STEP_CONST
19:	1
20:	STEP_ADD
21:	STEP_STORE
22:	STEP_CONST
23:	3
24:	STEP_MINUS
25:	STEP_OVER
26:	STEP_CONST
27:	2
28:	STEP_ADD
29:	STEP_STORE
30:	STEP_CONST
31:	0
32:	STEP_ALLOC
33:	STEP_PUSH_FP
34:	STEP_CONST
35:	1
36:	STEP_ADD
37:	STEP_FETCH_STACK
38:	STEP_DUP
39:	STEP_CONST
40:	1
41:	STEP_REFCNT
42:	STEP_DROP
43:	STEP_PUSH_FP
44:	STEP_CONST
45:	2
46:	STEP_ADD
47:	STEP_FETCH_STACK
48:	STEP_DUP
49:	STEP_CONST
50:	1
51:	STEP_REFCNT
52:	STEP_DROP
53:	STEP_OVER
54:	STEP_OVER
55:	STEP_CONST
56:	0
57:	STEP_ARRAYCAT
58:	STEP_SWAP2
59:	STEP_CONST
60:	-1
61:	STEP_REFCNT
62:	STEP_DROP
63:	STEP_CONST
64:	-1
65:	STEP_REFCNT
66:	STEP_DROP
67:	STEP_PUSH_FP
68:	STEP_CONST
69:	1
70:	STEP_ADD
71:	STEP_FETCH_STACK
72:	STEP_DUP
73:	STEP_CONST
74:	1
75:	STEP_REFCNT
76:	STEP_DROP
77:	STEP_PUSH_FP
78:	STEP_CONST
79:	3
80:	STEP_ADD
81:	STEP_FETCH_STACK
82:	STEP_DUP
83:	STEP_CONST
84:	1
85:	STEP_REFCNT
86:	STEP_DROP
87:	STEP_OVER
88:	STEP_OVER
89:	STEP_CONST
90:	0
91:	STEP_ARRAYCAT
92:	STEP_SWAP2
93:	STEP_CONST
94:	-1
95:	STEP_REFCNT
96:	STEP_DROP
97:	STEP_CONST
98:	-1
99:	STEP_REFCNT
100:	STEP_DROP
101:	STEP_CONST
102:	2
103:	STEP_ALLOC
104:	STEP_PUSH_FP
105:	STEP_CONST
106:	0
107:	STEP_ADD
108:	STEP_FETCH_STACK
109:	STEP_OVER
110:	STEP_CONST
111:	0
112:	STEP_ADD
113:	STEP_STORE
114:	STEP_CONST
115:	1
116:	STEP_OVER
117:	STEP_CONST
118:	1
119:	STEP_ADD
120:	STEP_STORE
121:	STEP_OVER
122:	STEP_OVER
123:	STEP_CONST
124:	0
125:	STEP_ARRAYCAT
126:	STEP_SWAP2
127:	STEP_CONST
128:	-1
129:	STEP_REFCNT
130:	STEP_DROP
131:	STEP_CONST
132:	-1
133:	STEP_REFCNT
134:	STEP_DROP
135:	STEP_CONST
136:	0
137:	STEP_ALLOC
138:	STEP_OVER
139:	STEP_OVER
140:	STEP_CONST
141:	0
142:	STEP_ARRAYCAT
143:	STEP_SWAP2
144:	STEP_CONST
145:	-1
146:	STEP_REFCNT
147:	STEP_DROP
148:	STEP_CONST
149:	-1
150:	STEP_REFCNT
151:	STEP_DROP
152:	STEP_CONST
153:	3
154:	STEP_ALLOC
155:	STEP_CONST
156:	1.0
157:	STEP_OVER
158:	STEP_CONST
159:	0
160:	STEP_ADD
161:	STEP_STORE
162:	STEP_CONST
163:	2.5
164:	STEP_MINUS
165:	STEP_OVER
166:	STEP_CONST
167:	1
168:	STEP_ADD
169:	STEP_STORE
170:	STEP_CONST
171:	3
172:	STEP_CAST_FLOAT
173:	STEP_OVER
174:	STEP_CONST
175:	2
176:	STEP_ADD
177:	STEP_STORE
178:	STEP_CONST
179:	0
180:	STEP_ALLOC
181:	STEP_PUSH_FP
182:	STEP_CONST
183:	6
184:	STEP_ADD
185:	STEP_FETCH_STACK
186:	STEP_DUP
187:	STEP_CONST
188:	1
189:	STEP_REFCNT
190:	STEP_DROP
191:	STEP_PUSH_FP
192:	STEP_CONST
193:	1
194:	STEP_ADD
195:	STEP_FETCH_STACK
196:	STEP_DUP
197:	STEP_CONST
198:	1
199:	STEP_REFCNT
200:	STEP_DROP
201:	STEP_OVER
202:	STEP_OVER
203:	STEP_CONST
204:	1
205:	STEP_ARRAYCAT
206:	STEP_SWAP2
207:	STEP_CONST
208:	-1
209:	STEP_REFCNT
210:	STEP_DROP
211:	STEP_CONST
212:	-1
213:	STEP_REFCNT
214:	STEP_DROP
215:	STEP_DUP
216:	STEP_CONST
217:	-1
218:	STEP_ARRAYCPY
219:	STEP_SWAP
220:	STEP_CONST
221:	-1
222:	STEP_REFCNT
223:	STEP_DROP
224:	STEP_PUSH_FP
225:	STEP_CONST
226:	6
227:	STEP_ADD
228:	STEP_FETCH_STACK
229:	STEP_DUP
230:	STEP_CONST
231:	1
232:	STEP_REFCNT
233:	STEP_DROP
234:	STEP_PUSH_FP
235:	STEP_CONST
236:	1
237:	STEP_ADD
238:	STEP_FETCH_STACK
239:	STEP_DUP
240:	STEP_CONST
241:	1
242:	STEP_REFCNT
243:	STEP_DROP
244:	STEP_OVER
245:	STEP_OVER
246:	STEP_CONST
247:	1
248:	STEP_ARRAYCAT
249:	STEP_SWAP2
250:	STEP_CONST
251:	-1
252:	STEP_REFCNT
253:	STEP_DROP
254:	STEP_CONST
255:	-1
256:	STEP_REFCNT
257:	STEP_DROP
258:	STEP_CONST
259:	test 1
260:	STEP_PRINT
261:	STEP_CRLF
262:	STEP_PUSH_FP
263:	STEP_CONST
264:	1
265:	STEP_ADD
266:	STEP_FETCH_STACK
267:	STEP_CONST
268:	1
269:	STEP_ADD
270:	STEP_FETCH
271:	STEP_PRINT
272:	STEP_CRLF
273:	STEP_CONST
274:	test iarray1
275:	STEP_PUSH_FP
276:	STEP_CONST
277:	1
278:	STEP_ADD
279:	STEP_FETCH_STACK
280:	STEP_DUP
281:	STEP_CONST
282:	1
283:	STEP_REFCNT
284:	STEP_DROP
285:	STEP_CONST
286:	0
287:	STEP_PUSH_FP
288:	STEP_CALL_SECONDARY
289:	637
290:	STEP_PRINT
291:	STEP_CRLF
292:	STEP_CONST
293:	test iarray2
294:	STEP_PUSH_FP
295:	STEP_CONST
296:	2
297:	STEP_ADD
298:	STEP_FETCH_STACK
299:	STEP_DUP
300:	STEP_CONST
301:	1
302:	STEP_REFCNT
303:	STEP_DROP
304:	STEP_CONST
305:	0
306:	STEP_PUSH_FP
307:	STEP_CALL_SECONDARY
308:	637
309:	STEP_PRINT
310:	STEP_CRLF
311:	STEP_CONST
312:	test iarray3
313:	STEP_PUSH_FP
314:	STEP_CONST
315:	3
316:	STEP_ADD
317:	STEP_FETCH_STACK
318:	STEP_DUP
319:	STEP_CONST
320:	1
321:	STEP_REFCNT
322:	STEP_DROP
323:	STEP_CONST
324:	0
325:	STEP_PUSH_FP
326:	STEP_CALL_SECONDARY
327:	637
328:	STEP_PRINT
329:	STEP_CRLF
330:	STEP_CONST
331:	test farray1
332:	STEP_PUSH_FP
333:	STEP_CONST
334:	6
335:	STEP_ADD
336:	STEP_FETCH_STACK
337:	STEP_DUP
338:	STEP_CONST
339:	1
340:	STEP_REFCNT
341:	STEP_DROP
342:	STEP_CONST
343:	0
344:	STEP_PUSH_FP
345:	STEP_CALL_SECONDARY
346:	509
347:	STEP_PRINT
348:	STEP_CRLF
349:	STEP_CONST
350:	test farray2
351:	STEP_PUSH_FP
352:	STEP_CONST
353:	7
354:	STEP_ADD
355:	STEP_FETCH_STACK
356:	STEP_DUP
357:	STEP_CONST
358:	1
359:	STEP_REFCNT
360:	STEP_DROP
361:	STEP_CONST
362:	0
363:	STEP_PUSH_FP
364:	STEP_CALL_SECONDARY
365:	509
366:	STEP_PRINT
367:	STEP_CRLF
368:	STEP_CONST
369:	test i farray1
370:	STEP_PUSH_FP
371:	STEP_CONST
372:	6
373:	STEP_ADD
374:	STEP_FETCH_STACK
375:	STEP_DUP
376:	STEP_CONST
377:	1
378:	STEP_REFCNT
379:	STEP_DROP
380:	STEP_DUP
381:	STEP_CONST
382:	-1
383:	STEP_ARRAYCPY
384:	STEP_SWAP
385:	STEP_CONST
386:	-1
387:	STEP_REFCNT
388:	STEP_DROP
389:	STEP_CONST
390:	0
391:	STEP_PUSH_FP
392:	STEP_CALL_SECONDARY
393:	637
394:	STEP_PRINT
395:	STEP_CRLF
396:	STEP_CONST
397:	test i farray2
398:	STEP_PUSH_FP
399:	STEP_CONST
400:	7
401:	STEP_ADD
402:	STEP_FETCH_STACK
403:	STEP_DUP
404:	STEP_CONST
405:	1
406:	STEP_REFCNT
407:	STEP_DROP
408:	STEP_DUP
409:	STEP_CONST
410:	-1
411:	STEP_ARRAYCPY
412:	STEP_SWAP
413:	STEP_CONST
414:	-1
415:	STEP_REFCNT
416:	STEP_DROP
417:	STEP_CONST
418:	0
419:	STEP_PUSH_FP
420:	STEP_CALL_SECONDARY
421:	637
422:	STEP_PRINT
423:	STEP_CRLF
424:	STEP_CONST
425:	test f iarray1
426:	STEP_PUSH_FP
427:	STEP_CONST
428:	1
429:	STEP_ADD
430:	STEP_FETCH_STACK
431:	STEP_DUP
432:	STEP_CONST
433:	1
434:	STEP_REFCNT
435:	STEP_DROP
436:	STEP_DUP
437:	STEP_CONST
438:	1
439:	STEP_ARRAYCPY
440:	STEP_SWAP
441:	STEP_CONST
442:	-1
443:	STEP_REFCNT
444:	STEP_DROP
445:	STEP_CONST
446:	0
447:	STEP_PUSH_FP
448:	STEP_CALL_SECONDARY
449:	509
450:	STEP_PRINT
451:	STEP_CRLF
452:	STEP_CONST
453:	test f iarray2
454:	STEP_PUSH_FP
455:	STEP_CONST
456:	2
457:	STEP_ADD
458:	STEP_FETCH_STACK
459:	STEP_DUP
460:	STEP_CONST
461:	1
462:	STEP_REFCNT
463:	STEP_DROP
464:	STEP_DUP
465:	STEP_CONST
466:	1
467:	STEP_ARRAYCPY
468:	STEP_SWAP
469:	STEP_CONST
470:	-1
471:	STEP_REFCNT
472:	STEP_DROP
473:	STEP_CONST
474:	0
475:	STEP_PUSH_FP
476:	STEP_CALL_SECONDARY
477:	509
478:	STEP_PRINT
479:	STEP_CRLF
480:	STEP_CONST
481:	test f iarray3
482:	STEP_PUSH_FP
483:	STEP_CONST
484:	3
485:	STEP_ADD
486:	STEP_FETCH_STACK
487:	STEP_DUP
488:	STEP_CONST
489:	1
490:	STEP_REFCNT
491:	STEP_DROP
492:	STEP_DUP
493:	STEP_CONST
494:	1
495:	STEP_ARRAYCPY
496:	STEP_SWAP
497:	STEP_CONST
498:	-1
499:	STEP_REFCNT
500:	STEP_DROP
501:	STEP_CONST
502:	0
503:	STEP_PUSH_FP
504:	STEP_CALL_SECONDARY
505:	509
506:	STEP_PRINT
507:	STEP_CRLF
508:	STEP_PAUSE
509*	FUNCTION outer scope::printfarray	***************
509:	STEP_PUSH_FP
510:	STEP_CONST
511:	-2
512:	STEP_ADD
513:	STEP_FETCH_STACK
514:	STEP_CONST
515:	1
516:	STEP_MINUS
517:	STEP_GT
518:	STEP_DUP
519:	STEP_GOTO0
520:	546
521:	STEP_DROP
522:	STEP_PUSH_FP
523:	STEP_CONST
524:	-2
525:	STEP_ADD
526:	STEP_FETCH_STACK
527:	STEP_PUSH_FP
528:	STEP_CONST
529:	-3
530:	STEP_ADD
531:	STEP_FETCH_STACK
532:	STEP_DUP
533:	STEP_CONST
534:	1
535:	STEP_REFCNT
536:	STEP_DROP
537:	STEP_DUP
538:	STEP_SUB1
539:	STEP_FETCH
540:	STEP_SWAP
541:	STEP_CONST
542:	-1
543:	STEP_REFCNT
544:	STEP_DROP
545:	STEP_LT
546:	STEP_GOTO0
547:	611
548:	STEP_PUSH_FP
549:	STEP_CONST
550:	-4
551:	STEP_ADD
552:	STEP_FETCH_STACK
553:	STEP_CONST
554:	 
555:	STEP_ADD
556:	STEP_PUSH_FP
557:	STEP_CONST
558:	-3
559:	STEP_ADD
560:	STEP_FETCH_STACK
561:	STEP_PUSH_FP
562:	STEP_CONST
563:	-2
564:	STEP_ADD
565:	STEP_FETCH_STACK
566:	STEP_ADD
567:	STEP_FETCH
568:	STEP_CAST_STRING
569:	STEP_ADD
570:	STEP_PUSH_FP
571:	STEP_CONST
572:	-3
573:	STEP_ADD
574:	STEP_FETCH_STACK
575:	STEP_DUP
576:	STEP_CONST
577:	1
578:	STEP_REFCNT
579:	STEP_DROP
580:	STEP_PUSH_FP
581:	STEP_CONST
582:	-2
583:	STEP_ADD
584:	STEP_FETCH_STACK
585:	STEP_CONST
586:	1
587:	STEP_ADD
588:	STEP_PUSH_FP
589:	STEP_CONST
590:	-1
591:	STEP_ADD
592:	STEP_FETCH_STACK
593:	STEP_PUSH_FP
594:	STEP_CONST
595:	-3
596:	STEP_ADD
597:	STEP_FETCH_STACK
598:	STEP_CONST
599:	-1
600:	STEP_REFCNT
601:	STEP_DROP
602:	STEP_CONST
603:	-4
604:	STEP_CONST
605:	-1
606:	STEP_DROPFRAME
607:	STEP_GOTO
608:	509
609:	STEP_GOTO
610:	616
611:	STEP_PUSH_FP
612:	STEP_CONST
613:	-4
614:	STEP_ADD
615:	STEP_FETCH_STACK
616:	STEP_CONST
617:	0
618:	STEP_STORE
619:	STEP_PUSH_FP
620:	STEP_CONST
621:	-3
622:	STEP_ADD
623:	STEP_FETCH_STACK
624:	STEP_CONST
625:	-1
626:	STEP_REFCNT
627:	STEP_DROP
628:	STEP_CONST
629:	-4
630:	STEP_CONST
631:	-1
632:	STEP_DROPFRAME
633:	STEP_CONST
634:	0
635:	STEP_FETCH
636:	STEP_RETURN
637*	FUNCTION outer scope::printiarray	***************
637:	STEP_PUSH_FP
638:	STEP_CONST
639:	-2
640:	STEP_ADD
641:	STEP_FETCH_STACK
642:	STEP_CONST
643:	1
644:	STEP_MINUS
645:	STEP_GT
646:	STEP_DUP
647:	STEP_GOTO0
648:	674
649:	STEP_DROP
650:	STEP_PUSH_FP
651:	STEP_CONST
652:	-2
653:	STEP_ADD
654:	STEP_FETCH_STACK
655:	STEP_PUSH_FP
656:	STEP_CONST
657:	-3
658:	STEP_ADD
659:	STEP_FETCH_STACK
660:	STEP_DUP
661:	STEP_CONST
662:	1
663:	STEP_REFCNT
664:	STEP_DROP
665:	STEP_DUP
666:	STEP_SUB1
667:	STEP_FETCH
668:	STEP_SWAP
669:	STEP_CONST
670:	-1
671:	STEP_REFCNT
672:	STEP_DROP
673:	STEP_LT
674:	STEP_GOTO0
675:	739
676:	STEP_PUSH_FP
677:	STEP_CONST
678:	-4
679:	STEP_ADD
680:	STEP_FETCH_STACK
681:	STEP_CONST
682:	 
683:	STEP_ADD
684:	STEP_PUSH_FP
685:	STEP_CONST
686:	-3
687:	STEP_ADD
688:	STEP_FETCH_STACK
689:	STEP_PUSH_FP
690:	STEP_CONST
691:	-2
692:	STEP_ADD
693:	STEP_FETCH_STACK
694:	STEP_ADD
695:	STEP_FETCH
696:	STEP_CAST_STRING
697:	STEP_ADD
698:	STEP_PUSH_FP
699:	STEP_CONST
700:	-3
701:	STEP_ADD
702:	STEP_FETCH_STACK
703:	STEP_DUP
704:	STEP_CONST
705:	1
706:	STEP_REFCNT
707:	STEP_DROP
708:	STEP_PUSH_FP
709:	STEP_CONST
710:	-2
711:	STEP_ADD
712:	STEP_FETCH_STACK
713:	STEP_CONST
714:	1
715:	STEP_ADD
716:	STEP_PUSH_FP
717:	STEP_CONST
718:	-1
719:	STEP_ADD
720:	STEP_FETCH_STACK
721:	STEP_PUSH_FP
722:	STEP_CONST
723:	-3
724:	STEP_ADD
725:	STEP_FETCH_STACK
726:	STEP_CONST
727:	-1
728:	STEP_REFCNT
729:	STEP_DROP
730:	STEP_CONST
731:	-4
732:	STEP_CONST
733:	-1
734:	STEP_DROPFRAME
735:	STEP_GOTO
736:	637
737:	STEP_GOTO
738:	744
739:	STEP_PUSH_FP
740:	STEP_CONST
741:	-4
742:	STEP_ADD
743:	STEP_FETCH_STACK
744:	STEP_CONST
745:	0
746:	STEP_STORE
747:	STEP_PUSH_FP
748:	STEP_CONST
749:	-3
750:	STEP_ADD
751:	STEP_FETCH_STACK
752:	STEP_CONST
753:	-1
754:	STEP_REFCNT
755:	STEP_DROP
756:	STEP_CONST
757:	-4
758:	STEP_CONST
759:	-1
760:	STEP_DROPFRAME
761:	STEP_CONST
762:	0
763:	STEP_FETCH
764:	STEP_RETURN
UNINTERPRETED DUMP OF THE ENTIRE DATA_DICTIONARY:
[   'test f iarray3',
    7,
    9223372036854775807,
    3,
    1,
    2,
    3,
    7,
    72,
    4,
    9223372036854775807,
    0,
    4,
    7,
    1,
    3,
    1,
    2,
    -3,
    7,
    10,
    1,
    6,
    1,
    2,
    3,
    1,
    2,
    -3,
    10,
    13,
    1,
    5,
    1,
    2,
    3,
    1,
    1,
    0,
    None,
    None,
    1,
    13,
    9,
    1,
    3,
    1.0,
    -2.5,
    3.0,
    1,
    1,
    9,
    10,
    1,
    6,
    1.0,
    -2.5,
    3.0,
    1.0,
    2.0,
    3.0,
    10,
    10,
    1,
    6,
    1,
    -2,
    3,
    1,
    2,
    3,
    10,
    7,
    0,
    None,
    None,
    2.0,
    -3.0,
    7]
DEBUG HEAP: size of data_dictionary = 79.
DEBUG HEAP: free list pointer at location 8 = 72.
DEBUG HEAP @ 9: HDR=4|RFC=9223372036854775807|0|4
FOOTER@12 = 4.
DEBUG HEAP @ 13: HDR=7|RFC=1|3|1
FOOTER@19 = 7.
	[0] = 1
	[1] = 2
	[2] = -3
DEBUG HEAP @ 20: HDR=10|RFC=1|6|1
FOOTER@29 = 10.
	[0] = 1
	[1] = 2
	[2] = 3
	[3] = 1
	[4] = 2
	[5] = -3
DEBUG HEAP @ 30: HDR=13|RFC=1|5|1
FOOTER@42 = 13.
	[0] = 1
	[1] = 2
	[2] = 3
	[3] = 1
	[4] = 1
DEBUG HEAP @ 43: HDR=9|RFC=1|3|1.0
FOOTER@51 = 9.
	[0] = 1.0
	[1] = -2.5
	[2] = 3.0
DEBUG HEAP @ 52: HDR=10|RFC=1|6|1.0
FOOTER@61 = 10.
	[0] = 1.0
	[1] = -2.5
	[2] = 3.0
	[3] = 1.0
	[4] = 2.0
	[5] = 3.0
DEBUG HEAP @ 62: HDR=10|RFC=1|6|1
FOOTER@71 = 10.
	[0] = 1
	[1] = -2
	[2] = 3
	[3] = 1
	[4] = 2
	[5] = 3
DEBUG HEAP @ 72: HDR=7|RFC=0|None|None
FOOTER@78 = 7.
DEBUG FREE LIST ENTRY @ 72: HDR=7|RFC=0|None|None.
