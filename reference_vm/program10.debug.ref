PROGRAM MID LINK BEFORE BACKPATCHING:
0*	FUNCTION outermost scope	***************
0:	STEP_CONST
1:	123456789
2:	STEP_PUSH_FP
3:	STEP_CALL_SECONDARY
4:	['func', 'factor1', 'int[]', (('valueToFactor', ('typedecl', 'int')),), {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': ['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {...})}, 168]}, 97]
5:	STEP_CONST
6:	F123456789: 
7:	STEP_PUSH_FP
8:	STEP_CONST
9:	0
10:	STEP_ADD
11:	STEP_FETCH_STACK
12:	STEP_DUP
13:	STEP_CONST
14:	1
15:	STEP_REFCNT
16:	STEP_DROP
17:	STEP_CONST
18:	0
19:	STEP_PUSH_FP
20:	STEP_CALL_SECONDARY
21:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'factor1': ['func', 'factor1', 'int[]', (('valueToFactor', ('typedecl', 'int')),), {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': ['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {...})}, 168]}, 97], '#funcs': 2, 'twoTo30Plus51': ('var', 'twoTo30Plus51', 'int[]', 2), '#locals': 4, '#depth': 0, 'twoTo30PlusFiftyOne': ('var', 'twoTo30PlusFiftyOne', 'int[]', 3), '#params': 0, 'twoTo30': ('var', 'twoTo30', 'int[]', 1), 'foo1123456789': ('var', 'foo1123456789', 'int[]', 0)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 360]
22:	STEP_PRINT
23:	STEP_CRLF
24:	STEP_CONST
25:	1073741824
26:	STEP_PUSH_FP
27:	STEP_CALL_SECONDARY
28:	['func', 'factor1', 'int[]', (('valueToFactor', ('typedecl', 'int')),), {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': ['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {...})}, 168]}, 97]
29:	STEP_CONST
30:	twoTo30: 
31:	STEP_PUSH_FP
32:	STEP_CONST
33:	1
34:	STEP_ADD
35:	STEP_FETCH_STACK
36:	STEP_DUP
37:	STEP_CONST
38:	1
39:	STEP_REFCNT
40:	STEP_DROP
41:	STEP_CONST
42:	0
43:	STEP_PUSH_FP
44:	STEP_CALL_SECONDARY
45:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'factor1': ['func', 'factor1', 'int[]', (('valueToFactor', ('typedecl', 'int')),), {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': ['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {...})}, 168]}, 97], '#funcs': 2, 'twoTo30Plus51': ('var', 'twoTo30Plus51', 'int[]', 2), '#locals': 4, '#depth': 0, 'twoTo30PlusFiftyOne': ('var', 'twoTo30PlusFiftyOne', 'int[]', 3), '#params': 0, 'twoTo30': ('var', 'twoTo30', 'int[]', 1), 'foo1123456789': ('var', 'foo1123456789', 'int[]', 0)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 360]
46:	STEP_PRINT
47:	STEP_CRLF
48:	STEP_CONST
49:	1073741875
50:	STEP_PUSH_FP
51:	STEP_CALL_SECONDARY
52:	['func', 'factor1', 'int[]', (('valueToFactor', ('typedecl', 'int')),), {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': ['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {...})}, 168]}, 97]
53:	STEP_CONST
54:	twoTo30Plus51: 
55:	STEP_PUSH_FP
56:	STEP_CONST
57:	2
58:	STEP_ADD
59:	STEP_FETCH_STACK
60:	STEP_DUP
61:	STEP_CONST
62:	1
63:	STEP_REFCNT
64:	STEP_DROP
65:	STEP_CONST
66:	0
67:	STEP_PUSH_FP
68:	STEP_CALL_SECONDARY
69:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'factor1': ['func', 'factor1', 'int[]', (('valueToFactor', ('typedecl', 'int')),), {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': ['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {...})}, 168]}, 97], '#funcs': 2, 'twoTo30Plus51': ('var', 'twoTo30Plus51', 'int[]', 2), '#locals': 4, '#depth': 0, 'twoTo30PlusFiftyOne': ('var', 'twoTo30PlusFiftyOne', 'int[]', 3), '#params': 0, 'twoTo30': ('var', 'twoTo30', 'int[]', 1), 'foo1123456789': ('var', 'foo1123456789', 'int[]', 0)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 360]
70:	STEP_PRINT
71:	STEP_CRLF
72:	STEP_CONST
73:	1073741875
74:	STEP_PUSH_FP
75:	STEP_CALL_SECONDARY
76:	['func', 'factor1', 'int[]', (('valueToFactor', ('typedecl', 'int')),), {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': ['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {...})}, 168]}, 97]
77:	STEP_CONST
78:	twoTo30PlusFiftyOne: 
79:	STEP_PUSH_FP
80:	STEP_CONST
81:	3
82:	STEP_ADD
83:	STEP_FETCH_STACK
84:	STEP_DUP
85:	STEP_CONST
86:	1
87:	STEP_REFCNT
88:	STEP_DROP
89:	STEP_CONST
90:	0
91:	STEP_PUSH_FP
92:	STEP_CALL_SECONDARY
93:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'factor1': ['func', 'factor1', 'int[]', (('valueToFactor', ('typedecl', 'int')),), {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': ['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {...})}, 168]}, 97], '#funcs': 2, 'twoTo30Plus51': ('var', 'twoTo30Plus51', 'int[]', 2), '#locals': 4, '#depth': 0, 'twoTo30PlusFiftyOne': ('var', 'twoTo30PlusFiftyOne', 'int[]', 3), '#params': 0, 'twoTo30': ('var', 'twoTo30', 'int[]', 1), 'foo1123456789': ('var', 'foo1123456789', 'int[]', 0)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 360]
94:	STEP_PRINT
95:	STEP_CRLF
96:	STEP_PAUSE
97*	FUNCTION outer scope::factor1	***************
97:	STEP_PUSH_FP
98:	STEP_CONST
99:	-2
100:	STEP_ADD
101:	STEP_FETCH_STACK
102:	STEP_CONST
103:	1
104:	STEP_GT
105:	STEP_GOTO0
106:	(36,)
107:	STEP_CONST
108:	Good parameter to factor1:
109:	STEP_PRINT
110:	STEP_CRLF
111:	STEP_PUSH_FP
112:	STEP_CONST
113:	-2
114:	STEP_ADD
115:	STEP_FETCH_STACK
116:	STEP_PRINT
117:	STEP_CRLF
118:	STEP_PUSH_FP
119:	STEP_CONST
120:	-2
121:	STEP_ADD
122:	STEP_FETCH_STACK
123:	STEP_CONST
124:	2
125:	STEP_CONST
126:	0
127:	STEP_ALLOC
128:	STEP_DUP
129:	STEP_CONST
130:	-1
131:	STEP_ARRAYCPY
132:	STEP_SWAP
133:	STEP_CONST
134:	-1
135:	STEP_REFCNT
136:	STEP_DROP
137:	STEP_PUSH_FP
138:	STEP_CALL_SECONDARY
139:	['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': [...]})}, 168]
140:	STEP_GOTO
141:	(15,)
142:	STEP_CONST
143:	Bad parameter to factor1: 
144:	STEP_PRINT
145:	STEP_CRLF
146:	STEP_PUSH_FP
147:	STEP_CONST
148:	-2
149:	STEP_ADD
150:	STEP_FETCH_STACK
151:	STEP_PRINT
152:	STEP_CRLF
153:	STEP_CONST
154:	0
155:	STEP_ALLOC
156:	STEP_CONST
157:	0
158:	STEP_STORE
159:	STEP_CONST
160:	-2
161:	STEP_CONST
162:	-1
163:	STEP_DROPFRAME
164:	STEP_CONST
165:	0
166:	STEP_FETCH
167:	STEP_RETURN
168*	FUNCTION outer scope::factor1::helpFactor	***************
168:	STEP_PUSH_FP
169:	STEP_CONST
170:	-3
171:	STEP_ADD
172:	STEP_FETCH_STACK
173:	STEP_PUSH_FP
174:	STEP_CONST
175:	-4
176:	STEP_ADD
177:	STEP_FETCH_STACK
178:	STEP_LT
179:	STEP_GOTO0
180:	(122,)
181:	STEP_PUSH_FP
182:	STEP_CONST
183:	-4
184:	STEP_ADD
185:	STEP_FETCH_STACK
186:	STEP_PUSH_FP
187:	STEP_CONST
188:	-3
189:	STEP_ADD
190:	STEP_FETCH_STACK
191:	STEP_MOD
192:	STEP_CONST
193:	0
194:	STEP_EQ
195:	STEP_GOTO0
196:	(60,)
197:	STEP_PUSH_FP
198:	STEP_CONST
199:	-4
200:	STEP_ADD
201:	STEP_FETCH_STACK
202:	STEP_PUSH_FP
203:	STEP_CONST
204:	-3
205:	STEP_ADD
206:	STEP_FETCH_STACK
207:	STEP_DIV
208:	STEP_CONST
209:	2
210:	STEP_PUSH_FP
211:	STEP_CONST
212:	-2
213:	STEP_ADD
214:	STEP_FETCH_STACK
215:	STEP_DUP
216:	STEP_CONST
217:	1
218:	STEP_REFCNT
219:	STEP_DROP
220:	STEP_CONST
221:	1
222:	STEP_ALLOC
223:	STEP_PUSH_FP
224:	STEP_CONST
225:	-3
226:	STEP_ADD
227:	STEP_FETCH_STACK
228:	STEP_OVER
229:	STEP_CONST
230:	0
231:	STEP_ADD
232:	STEP_STORE
233:	STEP_OVER
234:	STEP_OVER
235:	STEP_CONST
236:	0
237:	STEP_ARRAYCAT
238:	STEP_SWAP2
239:	STEP_CONST
240:	-1
241:	STEP_REFCNT
242:	STEP_DROP
243:	STEP_CONST
244:	-1
245:	STEP_REFCNT
246:	STEP_DROP
247:	STEP_PUSH_FP
248:	STEP_CONST
249:	-1
250:	STEP_ADD
251:	STEP_FETCH_STACK
252:	STEP_CALL_SECONDARY
253:	['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': [...]})}, 168]
254:	STEP_GOTO
255:	(45,)
256:	STEP_PUSH_FP
257:	STEP_CONST
258:	-4
259:	STEP_ADD
260:	STEP_FETCH_STACK
261:	STEP_PUSH_FP
262:	STEP_CONST
263:	-3
264:	STEP_ADD
265:	STEP_FETCH_STACK
266:	STEP_CONST
267:	2
268:	STEP_EQ
269:	STEP_GOTO0
270:	(5,)
271:	STEP_CONST
272:	3
273:	STEP_GOTO
274:	(9,)
275:	STEP_PUSH_FP
276:	STEP_CONST
277:	-3
278:	STEP_ADD
279:	STEP_FETCH_STACK
280:	STEP_CONST
281:	2
282:	STEP_ADD
283:	STEP_PUSH_FP
284:	STEP_CONST
285:	-2
286:	STEP_ADD
287:	STEP_FETCH_STACK
288:	STEP_DUP
289:	STEP_CONST
290:	1
291:	STEP_REFCNT
292:	STEP_DROP
293:	STEP_PUSH_FP
294:	STEP_CONST
295:	-1
296:	STEP_ADD
297:	STEP_FETCH_STACK
298:	STEP_CALL_SECONDARY
299:	['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': [...]})}, 168]
300:	STEP_GOTO
301:	(38,)
302:	STEP_PUSH_FP
303:	STEP_CONST
304:	-2
305:	STEP_ADD
306:	STEP_FETCH_STACK
307:	STEP_DUP
308:	STEP_CONST
309:	1
310:	STEP_REFCNT
311:	STEP_DROP
312:	STEP_CONST
313:	1
314:	STEP_ALLOC
315:	STEP_PUSH_FP
316:	STEP_CONST
317:	-4
318:	STEP_ADD
319:	STEP_FETCH_STACK
320:	STEP_OVER
321:	STEP_CONST
322:	0
323:	STEP_ADD
324:	STEP_STORE
325:	STEP_OVER
326:	STEP_OVER
327:	STEP_CONST
328:	0
329:	STEP_ARRAYCAT
330:	STEP_SWAP2
331:	STEP_CONST
332:	-1
333:	STEP_REFCNT
334:	STEP_DROP
335:	STEP_CONST
336:	-1
337:	STEP_REFCNT
338:	STEP_DROP
339:	STEP_CONST
340:	0
341:	STEP_STORE
342:	STEP_PUSH_FP
343:	STEP_CONST
344:	-2
345:	STEP_ADD
346:	STEP_FETCH_STACK
347:	STEP_CONST
348:	-1
349:	STEP_REFCNT
350:	STEP_DROP
351:	STEP_CONST
352:	-4
353:	STEP_CONST
354:	-1
355:	STEP_DROPFRAME
356:	STEP_CONST
357:	0
358:	STEP_FETCH
359:	STEP_RETURN
360*	FUNCTION outer scope::printiarray	***************
360:	STEP_PUSH_FP
361:	STEP_CONST
362:	-2
363:	STEP_ADD
364:	STEP_FETCH_STACK
365:	STEP_CONST
366:	1
367:	STEP_MINUS
368:	STEP_GT
369:	STEP_DUP
370:	STEP_GOTO0
371:	(26,)
372:	STEP_DROP
373:	STEP_PUSH_FP
374:	STEP_CONST
375:	-2
376:	STEP_ADD
377:	STEP_FETCH_STACK
378:	STEP_PUSH_FP
379:	STEP_CONST
380:	-3
381:	STEP_ADD
382:	STEP_FETCH_STACK
383:	STEP_DUP
384:	STEP_CONST
385:	1
386:	STEP_REFCNT
387:	STEP_DROP
388:	STEP_DUP
389:	STEP_SUB1
390:	STEP_FETCH
391:	STEP_SWAP
392:	STEP_CONST
393:	-1
394:	STEP_REFCNT
395:	STEP_DROP
396:	STEP_LT
397:	STEP_GOTO0
398:	(50,)
399:	STEP_PUSH_FP
400:	STEP_CONST
401:	-4
402:	STEP_ADD
403:	STEP_FETCH_STACK
404:	STEP_CONST
405:	 
406:	STEP_ADD
407:	STEP_PUSH_FP
408:	STEP_CONST
409:	-3
410:	STEP_ADD
411:	STEP_FETCH_STACK
412:	STEP_PUSH_FP
413:	STEP_CONST
414:	-2
415:	STEP_ADD
416:	STEP_FETCH_STACK
417:	STEP_ADD
418:	STEP_FETCH
419:	STEP_CAST_STRING
420:	STEP_ADD
421:	STEP_PUSH_FP
422:	STEP_CONST
423:	-3
424:	STEP_ADD
425:	STEP_FETCH_STACK
426:	STEP_DUP
427:	STEP_CONST
428:	1
429:	STEP_REFCNT
430:	STEP_DROP
431:	STEP_PUSH_FP
432:	STEP_CONST
433:	-2
434:	STEP_ADD
435:	STEP_FETCH_STACK
436:	STEP_CONST
437:	1
438:	STEP_ADD
439:	STEP_PUSH_FP
440:	STEP_CONST
441:	-1
442:	STEP_ADD
443:	STEP_FETCH_STACK
444:	STEP_CALL_SECONDARY
445:	['func', 'printiarray', 'string', (('prefix', ('typedecl', 'string')), ('iarray', ('typedecl', 'int[]')), ('i', ('typedecl', 'int'))), {'printiarray': ('symref', 'printiarray', 1, {'printiarray': [...], 'factor1': ['func', 'factor1', 'int[]', (('valueToFactor', ('typedecl', 'int')),), {'#funcs': 1, '#locals': 0, '#depth': 1, 'valueToFactor': ('var', 'valueToFactor', 'int', -2), '#params': 1, 'helpFactor': ['func', 'helpFactor', 'int[]', (('value', ('typedecl', 'int')), ('tryfactor', ('typedecl', 'int')), ('factors', ('typedecl', 'int[]'))), {'#funcs': 0, 'factors': ('var', 'factors', 'int[]', -2), '#locals': 0, '#depth': 2, 'value': ('var', 'value', 'int', -4), 'tryfactor': ('var', 'tryfactor', 'int', -3), '#params': 3, 'helpFactor': ('symref', 'helpFactor', 1, {...})}, 168]}, 97], '#funcs': 2, 'twoTo30Plus51': ('var', 'twoTo30Plus51', 'int[]', 2), '#locals': 4, '#depth': 0, 'twoTo30PlusFiftyOne': ('var', 'twoTo30PlusFiftyOne', 'int[]', 3), '#params': 0, 'twoTo30': ('var', 'twoTo30', 'int[]', 1), 'foo1123456789': ('var', 'foo1123456789', 'int[]', 0)}), 'iarray': ('var', 'iarray', 'int[]', -3), '#funcs': 0, '#locals': 0, '#depth': 1, 'prefix': ('var', 'prefix', 'string', -4), 'i': ('var', 'i', 'int', -2), '#params': 3}, 360]
446:	STEP_GOTO
447:	(6,)
448:	STEP_PUSH_FP
449:	STEP_CONST
450:	-4
451:	STEP_ADD
452:	STEP_FETCH_STACK
453:	STEP_CONST
454:	0
455:	STEP_STORE
456:	STEP_PUSH_FP
457:	STEP_CONST
458:	-3
459:	STEP_ADD
460:	STEP_FETCH_STACK
461:	STEP_CONST
462:	-1
463:	STEP_REFCNT
464:	STEP_DROP
465:	STEP_CONST
466:	-4
467:	STEP_CONST
468:	-1
469:	STEP_DROPFRAME
470:	STEP_CONST
471:	0
472:	STEP_FETCH
473:	STEP_RETURN
PROGRAM LINK AFTER BACKPATCHING:
0*	FUNCTION outermost scope	***************
0:	STEP_CONST
1:	123456789
2:	STEP_PUSH_FP
3:	STEP_CALL_SECONDARY
4:	97
5:	STEP_CONST
6:	F123456789: 
7:	STEP_PUSH_FP
8:	STEP_CONST
9:	0
10:	STEP_ADD
11:	STEP_FETCH_STACK
12:	STEP_DUP
13:	STEP_CONST
14:	1
15:	STEP_REFCNT
16:	STEP_DROP
17:	STEP_CONST
18:	0
19:	STEP_PUSH_FP
20:	STEP_CALL_SECONDARY
21:	360
22:	STEP_PRINT
23:	STEP_CRLF
24:	STEP_CONST
25:	1073741824
26:	STEP_PUSH_FP
27:	STEP_CALL_SECONDARY
28:	97
29:	STEP_CONST
30:	twoTo30: 
31:	STEP_PUSH_FP
32:	STEP_CONST
33:	1
34:	STEP_ADD
35:	STEP_FETCH_STACK
36:	STEP_DUP
37:	STEP_CONST
38:	1
39:	STEP_REFCNT
40:	STEP_DROP
41:	STEP_CONST
42:	0
43:	STEP_PUSH_FP
44:	STEP_CALL_SECONDARY
45:	360
46:	STEP_PRINT
47:	STEP_CRLF
48:	STEP_CONST
49:	1073741875
50:	STEP_PUSH_FP
51:	STEP_CALL_SECONDARY
52:	97
53:	STEP_CONST
54:	twoTo30Plus51: 
55:	STEP_PUSH_FP
56:	STEP_CONST
57:	2
58:	STEP_ADD
59:	STEP_FETCH_STACK
60:	STEP_DUP
61:	STEP_CONST
62:	1
63:	STEP_REFCNT
64:	STEP_DROP
65:	STEP_CONST
66:	0
67:	STEP_PUSH_FP
68:	STEP_CALL_SECONDARY
69:	360
70:	STEP_PRINT
71:	STEP_CRLF
72:	STEP_CONST
73:	1073741875
74:	STEP_PUSH_FP
75:	STEP_CALL_SECONDARY
76:	97
77:	STEP_CONST
78:	twoTo30PlusFiftyOne: 
79:	STEP_PUSH_FP
80:	STEP_CONST
81:	3
82:	STEP_ADD
83:	STEP_FETCH_STACK
84:	STEP_DUP
85:	STEP_CONST
86:	1
87:	STEP_REFCNT
88:	STEP_DROP
89:	STEP_CONST
90:	0
91:	STEP_PUSH_FP
92:	STEP_CALL_SECONDARY
93:	360
94:	STEP_PRINT
95:	STEP_CRLF
96:	STEP_PAUSE
97*	FUNCTION outer scope::factor1	***************
97:	STEP_PUSH_FP
98:	STEP_CONST
99:	-2
100:	STEP_ADD
101:	STEP_FETCH_STACK
102:	STEP_CONST
103:	1
104:	STEP_GT
105:	STEP_GOTO0
106:	142
107:	STEP_CONST
108:	Good parameter to factor1:
109:	STEP_PRINT
110:	STEP_CRLF
111:	STEP_PUSH_FP
112:	STEP_CONST
113:	-2
114:	STEP_ADD
115:	STEP_FETCH_STACK
116:	STEP_PRINT
117:	STEP_CRLF
118:	STEP_PUSH_FP
119:	STEP_CONST
120:	-2
121:	STEP_ADD
122:	STEP_FETCH_STACK
123:	STEP_CONST
124:	2
125:	STEP_CONST
126:	0
127:	STEP_ALLOC
128:	STEP_DUP
129:	STEP_CONST
130:	-1
131:	STEP_ARRAYCPY
132:	STEP_SWAP
133:	STEP_CONST
134:	-1
135:	STEP_REFCNT
136:	STEP_DROP
137:	STEP_PUSH_FP
138:	STEP_CALL_SECONDARY
139:	168
140:	STEP_GOTO
141:	156
142:	STEP_CONST
143:	Bad parameter to factor1: 
144:	STEP_PRINT
145:	STEP_CRLF
146:	STEP_PUSH_FP
147:	STEP_CONST
148:	-2
149:	STEP_ADD
150:	STEP_FETCH_STACK
151:	STEP_PRINT
152:	STEP_CRLF
153:	STEP_CONST
154:	0
155:	STEP_ALLOC
156:	STEP_CONST
157:	0
158:	STEP_STORE
159:	STEP_CONST
160:	-2
161:	STEP_CONST
162:	-1
163:	STEP_DROPFRAME
164:	STEP_CONST
165:	0
166:	STEP_FETCH
167:	STEP_RETURN
168*	FUNCTION outer scope::factor1::helpFactor	***************
168:	STEP_PUSH_FP
169:	STEP_CONST
170:	-3
171:	STEP_ADD
172:	STEP_FETCH_STACK
173:	STEP_PUSH_FP
174:	STEP_CONST
175:	-4
176:	STEP_ADD
177:	STEP_FETCH_STACK
178:	STEP_LT
179:	STEP_GOTO0
180:	302
181:	STEP_PUSH_FP
182:	STEP_CONST
183:	-4
184:	STEP_ADD
185:	STEP_FETCH_STACK
186:	STEP_PUSH_FP
187:	STEP_CONST
188:	-3
189:	STEP_ADD
190:	STEP_FETCH_STACK
191:	STEP_MOD
192:	STEP_CONST
193:	0
194:	STEP_EQ
195:	STEP_GOTO0
196:	256
197:	STEP_PUSH_FP
198:	STEP_CONST
199:	-4
200:	STEP_ADD
201:	STEP_FETCH_STACK
202:	STEP_PUSH_FP
203:	STEP_CONST
204:	-3
205:	STEP_ADD
206:	STEP_FETCH_STACK
207:	STEP_DIV
208:	STEP_CONST
209:	2
210:	STEP_PUSH_FP
211:	STEP_CONST
212:	-2
213:	STEP_ADD
214:	STEP_FETCH_STACK
215:	STEP_DUP
216:	STEP_CONST
217:	1
218:	STEP_REFCNT
219:	STEP_DROP
220:	STEP_CONST
221:	1
222:	STEP_ALLOC
223:	STEP_PUSH_FP
224:	STEP_CONST
225:	-3
226:	STEP_ADD
227:	STEP_FETCH_STACK
228:	STEP_OVER
229:	STEP_CONST
230:	0
231:	STEP_ADD
232:	STEP_STORE
233:	STEP_OVER
234:	STEP_OVER
235:	STEP_CONST
236:	0
237:	STEP_ARRAYCAT
238:	STEP_SWAP2
239:	STEP_CONST
240:	-1
241:	STEP_REFCNT
242:	STEP_DROP
243:	STEP_CONST
244:	-1
245:	STEP_REFCNT
246:	STEP_DROP
247:	STEP_PUSH_FP
248:	STEP_CONST
249:	-1
250:	STEP_ADD
251:	STEP_FETCH_STACK
252:	STEP_CALL_SECONDARY
253:	168
254:	STEP_GOTO
255:	300
256:	STEP_PUSH_FP
257:	STEP_CONST
258:	-4
259:	STEP_ADD
260:	STEP_FETCH_STACK
261:	STEP_PUSH_FP
262:	STEP_CONST
263:	-3
264:	STEP_ADD
265:	STEP_FETCH_STACK
266:	STEP_CONST
267:	2
268:	STEP_EQ
269:	STEP_GOTO0
270:	275
271:	STEP_CONST
272:	3
273:	STEP_GOTO
274:	283
275:	STEP_PUSH_FP
276:	STEP_CONST
277:	-3
278:	STEP_ADD
279:	STEP_FETCH_STACK
280:	STEP_CONST
281:	2
282:	STEP_ADD
283:	STEP_PUSH_FP
284:	STEP_CONST
285:	-2
286:	STEP_ADD
287:	STEP_FETCH_STACK
288:	STEP_DUP
289:	STEP_CONST
290:	1
291:	STEP_REFCNT
292:	STEP_DROP
293:	STEP_PUSH_FP
294:	STEP_CONST
295:	-1
296:	STEP_ADD
297:	STEP_FETCH_STACK
298:	STEP_CALL_SECONDARY
299:	168
300:	STEP_GOTO
301:	339
302:	STEP_PUSH_FP
303:	STEP_CONST
304:	-2
305:	STEP_ADD
306:	STEP_FETCH_STACK
307:	STEP_DUP
308:	STEP_CONST
309:	1
310:	STEP_REFCNT
311:	STEP_DROP
312:	STEP_CONST
313:	1
314:	STEP_ALLOC
315:	STEP_PUSH_FP
316:	STEP_CONST
317:	-4
318:	STEP_ADD
319:	STEP_FETCH_STACK
320:	STEP_OVER
321:	STEP_CONST
322:	0
323:	STEP_ADD
324:	STEP_STORE
325:	STEP_OVER
326:	STEP_OVER
327:	STEP_CONST
328:	0
329:	STEP_ARRAYCAT
330:	STEP_SWAP2
331:	STEP_CONST
332:	-1
333:	STEP_REFCNT
334:	STEP_DROP
335:	STEP_CONST
336:	-1
337:	STEP_REFCNT
338:	STEP_DROP
339:	STEP_CONST
340:	0
341:	STEP_STORE
342:	STEP_PUSH_FP
343:	STEP_CONST
344:	-2
345:	STEP_ADD
346:	STEP_FETCH_STACK
347:	STEP_CONST
348:	-1
349:	STEP_REFCNT
350:	STEP_DROP
351:	STEP_CONST
352:	-4
353:	STEP_CONST
354:	-1
355:	STEP_DROPFRAME
356:	STEP_CONST
357:	0
358:	STEP_FETCH
359:	STEP_RETURN
360*	FUNCTION outer scope::printiarray	***************
360:	STEP_PUSH_FP
361:	STEP_CONST
362:	-2
363:	STEP_ADD
364:	STEP_FETCH_STACK
365:	STEP_CONST
366:	1
367:	STEP_MINUS
368:	STEP_GT
369:	STEP_DUP
370:	STEP_GOTO0
371:	397
372:	STEP_DROP
373:	STEP_PUSH_FP
374:	STEP_CONST
375:	-2
376:	STEP_ADD
377:	STEP_FETCH_STACK
378:	STEP_PUSH_FP
379:	STEP_CONST
380:	-3
381:	STEP_ADD
382:	STEP_FETCH_STACK
383:	STEP_DUP
384:	STEP_CONST
385:	1
386:	STEP_REFCNT
387:	STEP_DROP
388:	STEP_DUP
389:	STEP_SUB1
390:	STEP_FETCH
391:	STEP_SWAP
392:	STEP_CONST
393:	-1
394:	STEP_REFCNT
395:	STEP_DROP
396:	STEP_LT
397:	STEP_GOTO0
398:	448
399:	STEP_PUSH_FP
400:	STEP_CONST
401:	-4
402:	STEP_ADD
403:	STEP_FETCH_STACK
404:	STEP_CONST
405:	 
406:	STEP_ADD
407:	STEP_PUSH_FP
408:	STEP_CONST
409:	-3
410:	STEP_ADD
411:	STEP_FETCH_STACK
412:	STEP_PUSH_FP
413:	STEP_CONST
414:	-2
415:	STEP_ADD
416:	STEP_FETCH_STACK
417:	STEP_ADD
418:	STEP_FETCH
419:	STEP_CAST_STRING
420:	STEP_ADD
421:	STEP_PUSH_FP
422:	STEP_CONST
423:	-3
424:	STEP_ADD
425:	STEP_FETCH_STACK
426:	STEP_DUP
427:	STEP_CONST
428:	1
429:	STEP_REFCNT
430:	STEP_DROP
431:	STEP_PUSH_FP
432:	STEP_CONST
433:	-2
434:	STEP_ADD
435:	STEP_FETCH_STACK
436:	STEP_CONST
437:	1
438:	STEP_ADD
439:	STEP_PUSH_FP
440:	STEP_CONST
441:	-1
442:	STEP_ADD
443:	STEP_FETCH_STACK
444:	STEP_CALL_SECONDARY
445:	360
446:	STEP_GOTO
447:	453
448:	STEP_PUSH_FP
449:	STEP_CONST
450:	-4
451:	STEP_ADD
452:	STEP_FETCH_STACK
453:	STEP_CONST
454:	0
455:	STEP_STORE
456:	STEP_PUSH_FP
457:	STEP_CONST
458:	-3
459:	STEP_ADD
460:	STEP_FETCH_STACK
461:	STEP_CONST
462:	-1
463:	STEP_REFCNT
464:	STEP_DROP
465:	STEP_CONST
466:	-4
467:	STEP_CONST
468:	-1
469:	STEP_DROPFRAME
470:	STEP_CONST
471:	0
472:	STEP_FETCH
473:	STEP_RETURN
UNINTERPRETED DUMP OF THE ENTIRE DATA_DICTIONARY:
[   'twoTo30PlusFiftyOne:  5 5 5 5 71 24197',
    83,
    4,
    9223372036854775807,
    0,
    4,
    23,
    0,
    83,
    37,
    5,
    5,
    7,
    16,
    0,
    None,
    None,
    5,
    5,
    5,
    8,
    8,
    0,
    None,
    None,
    None,
    5,
    5,
    23,
    8,
    1,
    4,
    3,
    3,
    3607,
    3803,
    8,
    17,
    0,
    6,
    64,
    5,
    12,
    0,
    None,
    None,
    5,
    7,
    0,
    None,
    None,
    5,
    71,
    17,
    10,
    1,
    6,
    5,
    5,
    5,
    5,
    71,
    24197,
    10,
    9,
    0,
    37,
    None,
    5,
    5,
    5,
    71,
    9,
    10,
    1,
    6,
    5,
    5,
    5,
    5,
    71,
    24197,
    10,
    487,
    0,
    None,
    6,
    483,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    13,
    470,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    14,
    456,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    15,
    441,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    16,
    425,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    17,
    408,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    18,
    390,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    19,
    371,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    20,
    351,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    21,
    330,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    22,
    308,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    23,
    285,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    24,
    261,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    25,
    236,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    26,
    210,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    27,
    183,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    28,
    155,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    29,
    126,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    30,
    96,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    31,
    65,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    32,
    33,
    0,
    None,
    None,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    487,
    34,
    1,
    30,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    34]
DEBUG HEAP: size of data_dictionary = 604.
DEBUG HEAP: free list pointer at location 1 = 83.
DEBUG HEAP @ 2: HDR=4|RFC=9223372036854775807|0|4
FOOTER@5 = 4.
DEBUG HEAP @ 6: HDR=23|RFC=0|83|37
FOOTER@28 = 23.
DEBUG HEAP @ 29: HDR=8|RFC=1|4|3
FOOTER@36 = 8.
	[0] = 3
	[1] = 3
	[2] = 3607
	[3] = 3803
DEBUG HEAP @ 37: HDR=17|RFC=0|6|64
FOOTER@53 = 17.
DEBUG HEAP @ 54: HDR=10|RFC=1|6|5
FOOTER@63 = 10.
	[0] = 5
	[1] = 5
	[2] = 5
	[3] = 5
	[4] = 71
	[5] = 24197
DEBUG HEAP @ 64: HDR=9|RFC=0|37|None
FOOTER@72 = 9.
DEBUG HEAP @ 73: HDR=10|RFC=1|6|5
FOOTER@82 = 10.
	[0] = 5
	[1] = 5
	[2] = 5
	[3] = 5
	[4] = 71
	[5] = 24197
DEBUG HEAP @ 83: HDR=487|RFC=0|None|6
FOOTER@569 = 487.
DEBUG HEAP @ 570: HDR=34|RFC=1|30|2
FOOTER@603 = 34.
	[0] = 2
	[1] = 2
	[2] = 2
	[3] = 2
	[4] = 2
	[5] = 2
	[6] = 2
	[7] = 2
	[8] = 2
	[9] = 2
	[10] = 2
	[11] = 2
	[12] = 2
	[13] = 2
	[14] = 2
	[15] = 2
	[16] = 2
	[17] = 2
	[18] = 2
	[19] = 2
	[20] = 2
	[21] = 2
	[22] = 2
	[23] = 2
	[24] = 2
	[25] = 2
	[26] = 2
	[27] = 2
	[28] = 2
	[29] = 2
DEBUG FREE LIST ENTRY @ 83: HDR=487|RFC=0|None|6.
DEBUG FREE LIST ENTRY @ 6: HDR=23|RFC=0|83|37.
DEBUG FREE LIST ENTRY @ 37: HDR=17|RFC=0|6|64.
DEBUG FREE LIST ENTRY @ 64: HDR=9|RFC=0|37|None.
