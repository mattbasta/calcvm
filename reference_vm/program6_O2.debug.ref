PROGRAM MID LINK BEFORE BACKPATCHING:
0*	FUNCTION outermost scope	***************
0:	STEP_CONST
1:	TEST fbool1(0) && fbool2(0) && fbool3(0)
2:	STEP_PRINT
3:	STEP_CRLF
4:	STEP_CONST
5:	0
6:	STEP_PUSH_FP
7:	STEP_CALL_SECONDARY
8:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
9:	STEP_DUP
10:	STEP_GOTO0
11:	(16,)
12:	STEP_DROP
13:	STEP_CONST
14:	0
15:	STEP_PUSH_FP
16:	STEP_CALL_SECONDARY
17:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
18:	STEP_DUP
19:	STEP_GOTO0
20:	(7,)
21:	STEP_DROP
22:	STEP_CONST
23:	0
24:	STEP_PUSH_FP
25:	STEP_CALL_SECONDARY
26:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
27:	STEP_PRINT
28:	STEP_CRLF
29:	STEP_CONST
30:	TEST fbool1(0) && fbool2(0) && fbool3(1)
31:	STEP_PRINT
32:	STEP_CRLF
33:	STEP_CONST
34:	0
35:	STEP_PUSH_FP
36:	STEP_CALL_SECONDARY
37:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
38:	STEP_DUP
39:	STEP_GOTO0
40:	(16,)
41:	STEP_DROP
42:	STEP_CONST
43:	0
44:	STEP_PUSH_FP
45:	STEP_CALL_SECONDARY
46:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
47:	STEP_DUP
48:	STEP_GOTO0
49:	(7,)
50:	STEP_DROP
51:	STEP_CONST
52:	1
53:	STEP_PUSH_FP
54:	STEP_CALL_SECONDARY
55:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
56:	STEP_PRINT
57:	STEP_CRLF
58:	STEP_CONST
59:	TEST fbool1(0) && fbool2(1) && fbool3(0)
60:	STEP_PRINT
61:	STEP_CRLF
62:	STEP_CONST
63:	0
64:	STEP_PUSH_FP
65:	STEP_CALL_SECONDARY
66:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
67:	STEP_DUP
68:	STEP_GOTO0
69:	(16,)
70:	STEP_DROP
71:	STEP_CONST
72:	1
73:	STEP_PUSH_FP
74:	STEP_CALL_SECONDARY
75:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
76:	STEP_DUP
77:	STEP_GOTO0
78:	(7,)
79:	STEP_DROP
80:	STEP_CONST
81:	0
82:	STEP_PUSH_FP
83:	STEP_CALL_SECONDARY
84:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
85:	STEP_PRINT
86:	STEP_CRLF
87:	STEP_CONST
88:	TEST fbool1(0) && fbool2(1) && fbool3(1)
89:	STEP_PRINT
90:	STEP_CRLF
91:	STEP_CONST
92:	0
93:	STEP_PUSH_FP
94:	STEP_CALL_SECONDARY
95:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
96:	STEP_DUP
97:	STEP_GOTO0
98:	(16,)
99:	STEP_DROP
100:	STEP_CONST
101:	1
102:	STEP_PUSH_FP
103:	STEP_CALL_SECONDARY
104:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
105:	STEP_DUP
106:	STEP_GOTO0
107:	(7,)
108:	STEP_DROP
109:	STEP_CONST
110:	1
111:	STEP_PUSH_FP
112:	STEP_CALL_SECONDARY
113:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
114:	STEP_PRINT
115:	STEP_CRLF
116:	STEP_CONST
117:	TEST fbool1(1) && fbool2(0) && fbool3(0)
118:	STEP_PRINT
119:	STEP_CRLF
120:	STEP_CONST
121:	1
122:	STEP_PUSH_FP
123:	STEP_CALL_SECONDARY
124:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
125:	STEP_DUP
126:	STEP_GOTO0
127:	(16,)
128:	STEP_DROP
129:	STEP_CONST
130:	0
131:	STEP_PUSH_FP
132:	STEP_CALL_SECONDARY
133:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
134:	STEP_DUP
135:	STEP_GOTO0
136:	(7,)
137:	STEP_DROP
138:	STEP_CONST
139:	0
140:	STEP_PUSH_FP
141:	STEP_CALL_SECONDARY
142:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
143:	STEP_PRINT
144:	STEP_CRLF
145:	STEP_CONST
146:	TEST fbool1(1) && fbool2(0) && fbool3(1)
147:	STEP_PRINT
148:	STEP_CRLF
149:	STEP_CONST
150:	1
151:	STEP_PUSH_FP
152:	STEP_CALL_SECONDARY
153:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
154:	STEP_DUP
155:	STEP_GOTO0
156:	(16,)
157:	STEP_DROP
158:	STEP_CONST
159:	0
160:	STEP_PUSH_FP
161:	STEP_CALL_SECONDARY
162:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
163:	STEP_DUP
164:	STEP_GOTO0
165:	(7,)
166:	STEP_DROP
167:	STEP_CONST
168:	1
169:	STEP_PUSH_FP
170:	STEP_CALL_SECONDARY
171:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
172:	STEP_PRINT
173:	STEP_CRLF
174:	STEP_CONST
175:	TEST fbool1(1) && fbool2(1) && fbool3(0)
176:	STEP_PRINT
177:	STEP_CRLF
178:	STEP_CONST
179:	1
180:	STEP_PUSH_FP
181:	STEP_CALL_SECONDARY
182:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
183:	STEP_DUP
184:	STEP_GOTO0
185:	(16,)
186:	STEP_DROP
187:	STEP_CONST
188:	1
189:	STEP_PUSH_FP
190:	STEP_CALL_SECONDARY
191:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
192:	STEP_DUP
193:	STEP_GOTO0
194:	(7,)
195:	STEP_DROP
196:	STEP_CONST
197:	0
198:	STEP_PUSH_FP
199:	STEP_CALL_SECONDARY
200:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
201:	STEP_PRINT
202:	STEP_CRLF
203:	STEP_CONST
204:	TEST fbool1(1) && fbool2(1) && fbool3(1)
205:	STEP_PRINT
206:	STEP_CRLF
207:	STEP_CONST
208:	1
209:	STEP_PUSH_FP
210:	STEP_CALL_SECONDARY
211:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
212:	STEP_DUP
213:	STEP_GOTO0
214:	(16,)
215:	STEP_DROP
216:	STEP_CONST
217:	1
218:	STEP_PUSH_FP
219:	STEP_CALL_SECONDARY
220:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
221:	STEP_DUP
222:	STEP_GOTO0
223:	(7,)
224:	STEP_DROP
225:	STEP_CONST
226:	1
227:	STEP_PUSH_FP
228:	STEP_CALL_SECONDARY
229:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
230:	STEP_PRINT
231:	STEP_CRLF
232:	STEP_CONST
233:	TEST fbool1(0) || fbool2(0) || fbool3(0)
234:	STEP_PRINT
235:	STEP_CRLF
236:	STEP_CONST
237:	0
238:	STEP_PUSH_FP
239:	STEP_CALL_SECONDARY
240:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
241:	STEP_DUP
242:	STEP_ZEQ
243:	STEP_GOTO0
244:	(17,)
245:	STEP_DROP
246:	STEP_CONST
247:	0
248:	STEP_PUSH_FP
249:	STEP_CALL_SECONDARY
250:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
251:	STEP_DUP
252:	STEP_ZEQ
253:	STEP_GOTO0
254:	(7,)
255:	STEP_DROP
256:	STEP_CONST
257:	0
258:	STEP_PUSH_FP
259:	STEP_CALL_SECONDARY
260:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
261:	STEP_PRINT
262:	STEP_CRLF
263:	STEP_CONST
264:	TEST fbool1(0) || fbool2(0) || fbool3(1)
265:	STEP_PRINT
266:	STEP_CRLF
267:	STEP_CONST
268:	0
269:	STEP_PUSH_FP
270:	STEP_CALL_SECONDARY
271:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
272:	STEP_DUP
273:	STEP_ZEQ
274:	STEP_GOTO0
275:	(17,)
276:	STEP_DROP
277:	STEP_CONST
278:	0
279:	STEP_PUSH_FP
280:	STEP_CALL_SECONDARY
281:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
282:	STEP_DUP
283:	STEP_ZEQ
284:	STEP_GOTO0
285:	(7,)
286:	STEP_DROP
287:	STEP_CONST
288:	1
289:	STEP_PUSH_FP
290:	STEP_CALL_SECONDARY
291:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
292:	STEP_PRINT
293:	STEP_CRLF
294:	STEP_CONST
295:	TEST fbool1(0) || fbool2(1) || fbool3(0)
296:	STEP_PRINT
297:	STEP_CRLF
298:	STEP_CONST
299:	0
300:	STEP_PUSH_FP
301:	STEP_CALL_SECONDARY
302:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
303:	STEP_DUP
304:	STEP_ZEQ
305:	STEP_GOTO0
306:	(17,)
307:	STEP_DROP
308:	STEP_CONST
309:	1
310:	STEP_PUSH_FP
311:	STEP_CALL_SECONDARY
312:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
313:	STEP_DUP
314:	STEP_ZEQ
315:	STEP_GOTO0
316:	(7,)
317:	STEP_DROP
318:	STEP_CONST
319:	0
320:	STEP_PUSH_FP
321:	STEP_CALL_SECONDARY
322:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
323:	STEP_PRINT
324:	STEP_CRLF
325:	STEP_CONST
326:	TEST fbool1(0) || fbool2(1) || fbool3(1)
327:	STEP_PRINT
328:	STEP_CRLF
329:	STEP_CONST
330:	0
331:	STEP_PUSH_FP
332:	STEP_CALL_SECONDARY
333:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
334:	STEP_DUP
335:	STEP_ZEQ
336:	STEP_GOTO0
337:	(17,)
338:	STEP_DROP
339:	STEP_CONST
340:	1
341:	STEP_PUSH_FP
342:	STEP_CALL_SECONDARY
343:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
344:	STEP_DUP
345:	STEP_ZEQ
346:	STEP_GOTO0
347:	(7,)
348:	STEP_DROP
349:	STEP_CONST
350:	1
351:	STEP_PUSH_FP
352:	STEP_CALL_SECONDARY
353:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
354:	STEP_PRINT
355:	STEP_CRLF
356:	STEP_CONST
357:	TEST fbool1(1) || fbool2(0) || fbool3(0)
358:	STEP_PRINT
359:	STEP_CRLF
360:	STEP_CONST
361:	1
362:	STEP_PUSH_FP
363:	STEP_CALL_SECONDARY
364:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
365:	STEP_DUP
366:	STEP_ZEQ
367:	STEP_GOTO0
368:	(17,)
369:	STEP_DROP
370:	STEP_CONST
371:	0
372:	STEP_PUSH_FP
373:	STEP_CALL_SECONDARY
374:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
375:	STEP_DUP
376:	STEP_ZEQ
377:	STEP_GOTO0
378:	(7,)
379:	STEP_DROP
380:	STEP_CONST
381:	0
382:	STEP_PUSH_FP
383:	STEP_CALL_SECONDARY
384:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
385:	STEP_PRINT
386:	STEP_CRLF
387:	STEP_CONST
388:	TEST fbool1(1) || fbool2(0) || fbool3(1)
389:	STEP_PRINT
390:	STEP_CRLF
391:	STEP_CONST
392:	1
393:	STEP_PUSH_FP
394:	STEP_CALL_SECONDARY
395:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
396:	STEP_DUP
397:	STEP_ZEQ
398:	STEP_GOTO0
399:	(17,)
400:	STEP_DROP
401:	STEP_CONST
402:	0
403:	STEP_PUSH_FP
404:	STEP_CALL_SECONDARY
405:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
406:	STEP_DUP
407:	STEP_ZEQ
408:	STEP_GOTO0
409:	(7,)
410:	STEP_DROP
411:	STEP_CONST
412:	1
413:	STEP_PUSH_FP
414:	STEP_CALL_SECONDARY
415:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
416:	STEP_PRINT
417:	STEP_CRLF
418:	STEP_CONST
419:	TEST fbool1(1) || fbool2(1) || fbool3(0)
420:	STEP_PRINT
421:	STEP_CRLF
422:	STEP_CONST
423:	1
424:	STEP_PUSH_FP
425:	STEP_CALL_SECONDARY
426:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
427:	STEP_DUP
428:	STEP_ZEQ
429:	STEP_GOTO0
430:	(17,)
431:	STEP_DROP
432:	STEP_CONST
433:	1
434:	STEP_PUSH_FP
435:	STEP_CALL_SECONDARY
436:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
437:	STEP_DUP
438:	STEP_ZEQ
439:	STEP_GOTO0
440:	(7,)
441:	STEP_DROP
442:	STEP_CONST
443:	0
444:	STEP_PUSH_FP
445:	STEP_CALL_SECONDARY
446:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
447:	STEP_PRINT
448:	STEP_CRLF
449:	STEP_CONST
450:	TEST fbool1(1) || fbool2(1) || fbool3(1)
451:	STEP_PRINT
452:	STEP_CRLF
453:	STEP_CONST
454:	1
455:	STEP_PUSH_FP
456:	STEP_CALL_SECONDARY
457:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
458:	STEP_DUP
459:	STEP_ZEQ
460:	STEP_GOTO0
461:	(17,)
462:	STEP_DROP
463:	STEP_CONST
464:	1
465:	STEP_PUSH_FP
466:	STEP_CALL_SECONDARY
467:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
468:	STEP_DUP
469:	STEP_ZEQ
470:	STEP_GOTO0
471:	(7,)
472:	STEP_DROP
473:	STEP_CONST
474:	1
475:	STEP_PUSH_FP
476:	STEP_CALL_SECONDARY
477:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
478:	STEP_PRINT
479:	STEP_CRLF
480:	STEP_CONST
481:	TEST fbool1(0) && fbool2(0) && fbool3(0)
482:	STEP_PRINT
483:	STEP_CRLF
484:	STEP_CONST
485:	0
486:	STEP_PUSH_FP
487:	STEP_CALL_SECONDARY
488:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
489:	STEP_DUP
490:	STEP_GOTO0
491:	(16,)
492:	STEP_DROP
493:	STEP_CONST
494:	0
495:	STEP_PUSH_FP
496:	STEP_CALL_SECONDARY
497:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
498:	STEP_DUP
499:	STEP_GOTO0
500:	(7,)
501:	STEP_DROP
502:	STEP_CONST
503:	0
504:	STEP_PUSH_FP
505:	STEP_CALL_SECONDARY
506:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
507:	STEP_PRINT
508:	STEP_CRLF
509:	STEP_CONST
510:	TEST fbool1(0) && fbool2(0) && fbool3(1)
511:	STEP_PRINT
512:	STEP_CRLF
513:	STEP_CONST
514:	0
515:	STEP_PUSH_FP
516:	STEP_CALL_SECONDARY
517:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
518:	STEP_DUP
519:	STEP_GOTO0
520:	(16,)
521:	STEP_DROP
522:	STEP_CONST
523:	0
524:	STEP_PUSH_FP
525:	STEP_CALL_SECONDARY
526:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
527:	STEP_DUP
528:	STEP_GOTO0
529:	(7,)
530:	STEP_DROP
531:	STEP_CONST
532:	1
533:	STEP_PUSH_FP
534:	STEP_CALL_SECONDARY
535:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
536:	STEP_PRINT
537:	STEP_CRLF
538:	STEP_CONST
539:	TEST fbool1(0) && fbool2(0) || fbool3(0)
540:	STEP_PRINT
541:	STEP_CRLF
542:	STEP_CONST
543:	0
544:	STEP_PUSH_FP
545:	STEP_CALL_SECONDARY
546:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
547:	STEP_DUP
548:	STEP_GOTO0
549:	(7,)
550:	STEP_DROP
551:	STEP_CONST
552:	0
553:	STEP_PUSH_FP
554:	STEP_CALL_SECONDARY
555:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
556:	STEP_DUP
557:	STEP_ZEQ
558:	STEP_GOTO0
559:	(7,)
560:	STEP_DROP
561:	STEP_CONST
562:	0
563:	STEP_PUSH_FP
564:	STEP_CALL_SECONDARY
565:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
566:	STEP_PRINT
567:	STEP_CRLF
568:	STEP_CONST
569:	TEST fbool1(0) && fbool2(0) || fbool3(1)
570:	STEP_PRINT
571:	STEP_CRLF
572:	STEP_CONST
573:	0
574:	STEP_PUSH_FP
575:	STEP_CALL_SECONDARY
576:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
577:	STEP_DUP
578:	STEP_GOTO0
579:	(7,)
580:	STEP_DROP
581:	STEP_CONST
582:	0
583:	STEP_PUSH_FP
584:	STEP_CALL_SECONDARY
585:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
586:	STEP_DUP
587:	STEP_ZEQ
588:	STEP_GOTO0
589:	(7,)
590:	STEP_DROP
591:	STEP_CONST
592:	1
593:	STEP_PUSH_FP
594:	STEP_CALL_SECONDARY
595:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
596:	STEP_PRINT
597:	STEP_CRLF
598:	STEP_CONST
599:	TEST fbool1(0) && fbool2(1) && fbool3(0)
600:	STEP_PRINT
601:	STEP_CRLF
602:	STEP_CONST
603:	0
604:	STEP_PUSH_FP
605:	STEP_CALL_SECONDARY
606:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
607:	STEP_DUP
608:	STEP_GOTO0
609:	(16,)
610:	STEP_DROP
611:	STEP_CONST
612:	1
613:	STEP_PUSH_FP
614:	STEP_CALL_SECONDARY
615:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
616:	STEP_DUP
617:	STEP_GOTO0
618:	(7,)
619:	STEP_DROP
620:	STEP_CONST
621:	0
622:	STEP_PUSH_FP
623:	STEP_CALL_SECONDARY
624:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
625:	STEP_PRINT
626:	STEP_CRLF
627:	STEP_CONST
628:	TEST fbool1(0) && fbool2(1) && fbool3(1)
629:	STEP_PRINT
630:	STEP_CRLF
631:	STEP_CONST
632:	0
633:	STEP_PUSH_FP
634:	STEP_CALL_SECONDARY
635:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
636:	STEP_DUP
637:	STEP_GOTO0
638:	(16,)
639:	STEP_DROP
640:	STEP_CONST
641:	1
642:	STEP_PUSH_FP
643:	STEP_CALL_SECONDARY
644:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
645:	STEP_DUP
646:	STEP_GOTO0
647:	(7,)
648:	STEP_DROP
649:	STEP_CONST
650:	1
651:	STEP_PUSH_FP
652:	STEP_CALL_SECONDARY
653:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
654:	STEP_PRINT
655:	STEP_CRLF
656:	STEP_CONST
657:	TEST fbool1(0) && fbool2(1) || fbool3(0)
658:	STEP_PRINT
659:	STEP_CRLF
660:	STEP_CONST
661:	0
662:	STEP_PUSH_FP
663:	STEP_CALL_SECONDARY
664:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
665:	STEP_DUP
666:	STEP_GOTO0
667:	(7,)
668:	STEP_DROP
669:	STEP_CONST
670:	1
671:	STEP_PUSH_FP
672:	STEP_CALL_SECONDARY
673:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
674:	STEP_DUP
675:	STEP_ZEQ
676:	STEP_GOTO0
677:	(7,)
678:	STEP_DROP
679:	STEP_CONST
680:	0
681:	STEP_PUSH_FP
682:	STEP_CALL_SECONDARY
683:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
684:	STEP_PRINT
685:	STEP_CRLF
686:	STEP_CONST
687:	TEST fbool1(0) && fbool2(1) || fbool3(1)
688:	STEP_PRINT
689:	STEP_CRLF
690:	STEP_CONST
691:	0
692:	STEP_PUSH_FP
693:	STEP_CALL_SECONDARY
694:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
695:	STEP_DUP
696:	STEP_GOTO0
697:	(7,)
698:	STEP_DROP
699:	STEP_CONST
700:	1
701:	STEP_PUSH_FP
702:	STEP_CALL_SECONDARY
703:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
704:	STEP_DUP
705:	STEP_ZEQ
706:	STEP_GOTO0
707:	(7,)
708:	STEP_DROP
709:	STEP_CONST
710:	1
711:	STEP_PUSH_FP
712:	STEP_CALL_SECONDARY
713:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
714:	STEP_PRINT
715:	STEP_CRLF
716:	STEP_CONST
717:	TEST fbool1(0) || fbool2(0) && fbool3(0)
718:	STEP_PRINT
719:	STEP_CRLF
720:	STEP_CONST
721:	0
722:	STEP_PUSH_FP
723:	STEP_CALL_SECONDARY
724:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
725:	STEP_DUP
726:	STEP_ZEQ
727:	STEP_GOTO0
728:	(16,)
729:	STEP_DROP
730:	STEP_CONST
731:	0
732:	STEP_PUSH_FP
733:	STEP_CALL_SECONDARY
734:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
735:	STEP_DUP
736:	STEP_GOTO0
737:	(7,)
738:	STEP_DROP
739:	STEP_CONST
740:	0
741:	STEP_PUSH_FP
742:	STEP_CALL_SECONDARY
743:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
744:	STEP_PRINT
745:	STEP_CRLF
746:	STEP_CONST
747:	TEST fbool1(0) || fbool2(0) && fbool3(1)
748:	STEP_PRINT
749:	STEP_CRLF
750:	STEP_CONST
751:	0
752:	STEP_PUSH_FP
753:	STEP_CALL_SECONDARY
754:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
755:	STEP_DUP
756:	STEP_ZEQ
757:	STEP_GOTO0
758:	(16,)
759:	STEP_DROP
760:	STEP_CONST
761:	0
762:	STEP_PUSH_FP
763:	STEP_CALL_SECONDARY
764:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
765:	STEP_DUP
766:	STEP_GOTO0
767:	(7,)
768:	STEP_DROP
769:	STEP_CONST
770:	1
771:	STEP_PUSH_FP
772:	STEP_CALL_SECONDARY
773:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
774:	STEP_PRINT
775:	STEP_CRLF
776:	STEP_CONST
777:	TEST fbool1(0) || fbool2(0) || fbool3(0)
778:	STEP_PRINT
779:	STEP_CRLF
780:	STEP_CONST
781:	0
782:	STEP_PUSH_FP
783:	STEP_CALL_SECONDARY
784:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
785:	STEP_DUP
786:	STEP_ZEQ
787:	STEP_GOTO0
788:	(17,)
789:	STEP_DROP
790:	STEP_CONST
791:	0
792:	STEP_PUSH_FP
793:	STEP_CALL_SECONDARY
794:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
795:	STEP_DUP
796:	STEP_ZEQ
797:	STEP_GOTO0
798:	(7,)
799:	STEP_DROP
800:	STEP_CONST
801:	0
802:	STEP_PUSH_FP
803:	STEP_CALL_SECONDARY
804:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
805:	STEP_PRINT
806:	STEP_CRLF
807:	STEP_CONST
808:	TEST fbool1(0) || fbool2(0) || fbool3(1)
809:	STEP_PRINT
810:	STEP_CRLF
811:	STEP_CONST
812:	0
813:	STEP_PUSH_FP
814:	STEP_CALL_SECONDARY
815:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
816:	STEP_DUP
817:	STEP_ZEQ
818:	STEP_GOTO0
819:	(17,)
820:	STEP_DROP
821:	STEP_CONST
822:	0
823:	STEP_PUSH_FP
824:	STEP_CALL_SECONDARY
825:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
826:	STEP_DUP
827:	STEP_ZEQ
828:	STEP_GOTO0
829:	(7,)
830:	STEP_DROP
831:	STEP_CONST
832:	1
833:	STEP_PUSH_FP
834:	STEP_CALL_SECONDARY
835:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
836:	STEP_PRINT
837:	STEP_CRLF
838:	STEP_CONST
839:	TEST fbool1(0) || fbool2(1) && fbool3(0)
840:	STEP_PRINT
841:	STEP_CRLF
842:	STEP_CONST
843:	0
844:	STEP_PUSH_FP
845:	STEP_CALL_SECONDARY
846:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
847:	STEP_DUP
848:	STEP_ZEQ
849:	STEP_GOTO0
850:	(16,)
851:	STEP_DROP
852:	STEP_CONST
853:	1
854:	STEP_PUSH_FP
855:	STEP_CALL_SECONDARY
856:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
857:	STEP_DUP
858:	STEP_GOTO0
859:	(7,)
860:	STEP_DROP
861:	STEP_CONST
862:	0
863:	STEP_PUSH_FP
864:	STEP_CALL_SECONDARY
865:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
866:	STEP_PRINT
867:	STEP_CRLF
868:	STEP_CONST
869:	TEST fbool1(0) || fbool2(1) && fbool3(1)
870:	STEP_PRINT
871:	STEP_CRLF
872:	STEP_CONST
873:	0
874:	STEP_PUSH_FP
875:	STEP_CALL_SECONDARY
876:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
877:	STEP_DUP
878:	STEP_ZEQ
879:	STEP_GOTO0
880:	(16,)
881:	STEP_DROP
882:	STEP_CONST
883:	1
884:	STEP_PUSH_FP
885:	STEP_CALL_SECONDARY
886:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
887:	STEP_DUP
888:	STEP_GOTO0
889:	(7,)
890:	STEP_DROP
891:	STEP_CONST
892:	1
893:	STEP_PUSH_FP
894:	STEP_CALL_SECONDARY
895:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
896:	STEP_PRINT
897:	STEP_CRLF
898:	STEP_CONST
899:	TEST fbool1(0) || fbool2(1) || fbool3(0)
900:	STEP_PRINT
901:	STEP_CRLF
902:	STEP_CONST
903:	0
904:	STEP_PUSH_FP
905:	STEP_CALL_SECONDARY
906:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
907:	STEP_DUP
908:	STEP_ZEQ
909:	STEP_GOTO0
910:	(17,)
911:	STEP_DROP
912:	STEP_CONST
913:	1
914:	STEP_PUSH_FP
915:	STEP_CALL_SECONDARY
916:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
917:	STEP_DUP
918:	STEP_ZEQ
919:	STEP_GOTO0
920:	(7,)
921:	STEP_DROP
922:	STEP_CONST
923:	0
924:	STEP_PUSH_FP
925:	STEP_CALL_SECONDARY
926:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
927:	STEP_PRINT
928:	STEP_CRLF
929:	STEP_CONST
930:	TEST fbool1(0) || fbool2(1) || fbool3(1)
931:	STEP_PRINT
932:	STEP_CRLF
933:	STEP_CONST
934:	0
935:	STEP_PUSH_FP
936:	STEP_CALL_SECONDARY
937:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
938:	STEP_DUP
939:	STEP_ZEQ
940:	STEP_GOTO0
941:	(17,)
942:	STEP_DROP
943:	STEP_CONST
944:	1
945:	STEP_PUSH_FP
946:	STEP_CALL_SECONDARY
947:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
948:	STEP_DUP
949:	STEP_ZEQ
950:	STEP_GOTO0
951:	(7,)
952:	STEP_DROP
953:	STEP_CONST
954:	1
955:	STEP_PUSH_FP
956:	STEP_CALL_SECONDARY
957:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
958:	STEP_PRINT
959:	STEP_CRLF
960:	STEP_CONST
961:	TEST fbool1(1) && fbool2(0) && fbool3(0)
962:	STEP_PRINT
963:	STEP_CRLF
964:	STEP_CONST
965:	1
966:	STEP_PUSH_FP
967:	STEP_CALL_SECONDARY
968:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
969:	STEP_DUP
970:	STEP_GOTO0
971:	(16,)
972:	STEP_DROP
973:	STEP_CONST
974:	0
975:	STEP_PUSH_FP
976:	STEP_CALL_SECONDARY
977:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
978:	STEP_DUP
979:	STEP_GOTO0
980:	(7,)
981:	STEP_DROP
982:	STEP_CONST
983:	0
984:	STEP_PUSH_FP
985:	STEP_CALL_SECONDARY
986:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
987:	STEP_PRINT
988:	STEP_CRLF
989:	STEP_CONST
990:	TEST fbool1(1) && fbool2(0) && fbool3(1)
991:	STEP_PRINT
992:	STEP_CRLF
993:	STEP_CONST
994:	1
995:	STEP_PUSH_FP
996:	STEP_CALL_SECONDARY
997:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
998:	STEP_DUP
999:	STEP_GOTO0
1000:	(16,)
1001:	STEP_DROP
1002:	STEP_CONST
1003:	0
1004:	STEP_PUSH_FP
1005:	STEP_CALL_SECONDARY
1006:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1007:	STEP_DUP
1008:	STEP_GOTO0
1009:	(7,)
1010:	STEP_DROP
1011:	STEP_CONST
1012:	1
1013:	STEP_PUSH_FP
1014:	STEP_CALL_SECONDARY
1015:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1016:	STEP_PRINT
1017:	STEP_CRLF
1018:	STEP_CONST
1019:	TEST fbool1(1) && fbool2(0) || fbool3(0)
1020:	STEP_PRINT
1021:	STEP_CRLF
1022:	STEP_CONST
1023:	1
1024:	STEP_PUSH_FP
1025:	STEP_CALL_SECONDARY
1026:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1027:	STEP_DUP
1028:	STEP_GOTO0
1029:	(7,)
1030:	STEP_DROP
1031:	STEP_CONST
1032:	0
1033:	STEP_PUSH_FP
1034:	STEP_CALL_SECONDARY
1035:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1036:	STEP_DUP
1037:	STEP_ZEQ
1038:	STEP_GOTO0
1039:	(7,)
1040:	STEP_DROP
1041:	STEP_CONST
1042:	0
1043:	STEP_PUSH_FP
1044:	STEP_CALL_SECONDARY
1045:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1046:	STEP_PRINT
1047:	STEP_CRLF
1048:	STEP_CONST
1049:	TEST fbool1(1) && fbool2(0) || fbool3(1)
1050:	STEP_PRINT
1051:	STEP_CRLF
1052:	STEP_CONST
1053:	1
1054:	STEP_PUSH_FP
1055:	STEP_CALL_SECONDARY
1056:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1057:	STEP_DUP
1058:	STEP_GOTO0
1059:	(7,)
1060:	STEP_DROP
1061:	STEP_CONST
1062:	0
1063:	STEP_PUSH_FP
1064:	STEP_CALL_SECONDARY
1065:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1066:	STEP_DUP
1067:	STEP_ZEQ
1068:	STEP_GOTO0
1069:	(7,)
1070:	STEP_DROP
1071:	STEP_CONST
1072:	1
1073:	STEP_PUSH_FP
1074:	STEP_CALL_SECONDARY
1075:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1076:	STEP_PRINT
1077:	STEP_CRLF
1078:	STEP_CONST
1079:	TEST fbool1(1) && fbool2(1) && fbool3(0)
1080:	STEP_PRINT
1081:	STEP_CRLF
1082:	STEP_CONST
1083:	1
1084:	STEP_PUSH_FP
1085:	STEP_CALL_SECONDARY
1086:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1087:	STEP_DUP
1088:	STEP_GOTO0
1089:	(16,)
1090:	STEP_DROP
1091:	STEP_CONST
1092:	1
1093:	STEP_PUSH_FP
1094:	STEP_CALL_SECONDARY
1095:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1096:	STEP_DUP
1097:	STEP_GOTO0
1098:	(7,)
1099:	STEP_DROP
1100:	STEP_CONST
1101:	0
1102:	STEP_PUSH_FP
1103:	STEP_CALL_SECONDARY
1104:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1105:	STEP_PRINT
1106:	STEP_CRLF
1107:	STEP_CONST
1108:	TEST fbool1(1) && fbool2(1) && fbool3(1)
1109:	STEP_PRINT
1110:	STEP_CRLF
1111:	STEP_CONST
1112:	1
1113:	STEP_PUSH_FP
1114:	STEP_CALL_SECONDARY
1115:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1116:	STEP_DUP
1117:	STEP_GOTO0
1118:	(16,)
1119:	STEP_DROP
1120:	STEP_CONST
1121:	1
1122:	STEP_PUSH_FP
1123:	STEP_CALL_SECONDARY
1124:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1125:	STEP_DUP
1126:	STEP_GOTO0
1127:	(7,)
1128:	STEP_DROP
1129:	STEP_CONST
1130:	1
1131:	STEP_PUSH_FP
1132:	STEP_CALL_SECONDARY
1133:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1134:	STEP_PRINT
1135:	STEP_CRLF
1136:	STEP_CONST
1137:	TEST fbool1(1) && fbool2(1) || fbool3(0)
1138:	STEP_PRINT
1139:	STEP_CRLF
1140:	STEP_CONST
1141:	1
1142:	STEP_PUSH_FP
1143:	STEP_CALL_SECONDARY
1144:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1145:	STEP_DUP
1146:	STEP_GOTO0
1147:	(7,)
1148:	STEP_DROP
1149:	STEP_CONST
1150:	1
1151:	STEP_PUSH_FP
1152:	STEP_CALL_SECONDARY
1153:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1154:	STEP_DUP
1155:	STEP_ZEQ
1156:	STEP_GOTO0
1157:	(7,)
1158:	STEP_DROP
1159:	STEP_CONST
1160:	0
1161:	STEP_PUSH_FP
1162:	STEP_CALL_SECONDARY
1163:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1164:	STEP_PRINT
1165:	STEP_CRLF
1166:	STEP_CONST
1167:	TEST fbool1(1) && fbool2(1) || fbool3(1)
1168:	STEP_PRINT
1169:	STEP_CRLF
1170:	STEP_CONST
1171:	1
1172:	STEP_PUSH_FP
1173:	STEP_CALL_SECONDARY
1174:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1175:	STEP_DUP
1176:	STEP_GOTO0
1177:	(7,)
1178:	STEP_DROP
1179:	STEP_CONST
1180:	1
1181:	STEP_PUSH_FP
1182:	STEP_CALL_SECONDARY
1183:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1184:	STEP_DUP
1185:	STEP_ZEQ
1186:	STEP_GOTO0
1187:	(7,)
1188:	STEP_DROP
1189:	STEP_CONST
1190:	1
1191:	STEP_PUSH_FP
1192:	STEP_CALL_SECONDARY
1193:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1194:	STEP_PRINT
1195:	STEP_CRLF
1196:	STEP_CONST
1197:	TEST fbool1(1) || fbool2(0) && fbool3(0)
1198:	STEP_PRINT
1199:	STEP_CRLF
1200:	STEP_CONST
1201:	1
1202:	STEP_PUSH_FP
1203:	STEP_CALL_SECONDARY
1204:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1205:	STEP_DUP
1206:	STEP_ZEQ
1207:	STEP_GOTO0
1208:	(16,)
1209:	STEP_DROP
1210:	STEP_CONST
1211:	0
1212:	STEP_PUSH_FP
1213:	STEP_CALL_SECONDARY
1214:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1215:	STEP_DUP
1216:	STEP_GOTO0
1217:	(7,)
1218:	STEP_DROP
1219:	STEP_CONST
1220:	0
1221:	STEP_PUSH_FP
1222:	STEP_CALL_SECONDARY
1223:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1224:	STEP_PRINT
1225:	STEP_CRLF
1226:	STEP_CONST
1227:	TEST fbool1(1) || fbool2(0) && fbool3(1)
1228:	STEP_PRINT
1229:	STEP_CRLF
1230:	STEP_CONST
1231:	1
1232:	STEP_PUSH_FP
1233:	STEP_CALL_SECONDARY
1234:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1235:	STEP_DUP
1236:	STEP_ZEQ
1237:	STEP_GOTO0
1238:	(16,)
1239:	STEP_DROP
1240:	STEP_CONST
1241:	0
1242:	STEP_PUSH_FP
1243:	STEP_CALL_SECONDARY
1244:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1245:	STEP_DUP
1246:	STEP_GOTO0
1247:	(7,)
1248:	STEP_DROP
1249:	STEP_CONST
1250:	1
1251:	STEP_PUSH_FP
1252:	STEP_CALL_SECONDARY
1253:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1254:	STEP_PRINT
1255:	STEP_CRLF
1256:	STEP_CONST
1257:	TEST fbool1(1) || fbool2(0) || fbool3(0)
1258:	STEP_PRINT
1259:	STEP_CRLF
1260:	STEP_CONST
1261:	1
1262:	STEP_PUSH_FP
1263:	STEP_CALL_SECONDARY
1264:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1265:	STEP_DUP
1266:	STEP_ZEQ
1267:	STEP_GOTO0
1268:	(17,)
1269:	STEP_DROP
1270:	STEP_CONST
1271:	0
1272:	STEP_PUSH_FP
1273:	STEP_CALL_SECONDARY
1274:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1275:	STEP_DUP
1276:	STEP_ZEQ
1277:	STEP_GOTO0
1278:	(7,)
1279:	STEP_DROP
1280:	STEP_CONST
1281:	0
1282:	STEP_PUSH_FP
1283:	STEP_CALL_SECONDARY
1284:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1285:	STEP_PRINT
1286:	STEP_CRLF
1287:	STEP_CONST
1288:	TEST fbool1(1) || fbool2(0) || fbool3(1)
1289:	STEP_PRINT
1290:	STEP_CRLF
1291:	STEP_CONST
1292:	1
1293:	STEP_PUSH_FP
1294:	STEP_CALL_SECONDARY
1295:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1296:	STEP_DUP
1297:	STEP_ZEQ
1298:	STEP_GOTO0
1299:	(17,)
1300:	STEP_DROP
1301:	STEP_CONST
1302:	0
1303:	STEP_PUSH_FP
1304:	STEP_CALL_SECONDARY
1305:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1306:	STEP_DUP
1307:	STEP_ZEQ
1308:	STEP_GOTO0
1309:	(7,)
1310:	STEP_DROP
1311:	STEP_CONST
1312:	1
1313:	STEP_PUSH_FP
1314:	STEP_CALL_SECONDARY
1315:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1316:	STEP_PRINT
1317:	STEP_CRLF
1318:	STEP_CONST
1319:	TEST fbool1(1) || fbool2(1) && fbool3(0)
1320:	STEP_PRINT
1321:	STEP_CRLF
1322:	STEP_CONST
1323:	1
1324:	STEP_PUSH_FP
1325:	STEP_CALL_SECONDARY
1326:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1327:	STEP_DUP
1328:	STEP_ZEQ
1329:	STEP_GOTO0
1330:	(16,)
1331:	STEP_DROP
1332:	STEP_CONST
1333:	1
1334:	STEP_PUSH_FP
1335:	STEP_CALL_SECONDARY
1336:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1337:	STEP_DUP
1338:	STEP_GOTO0
1339:	(7,)
1340:	STEP_DROP
1341:	STEP_CONST
1342:	0
1343:	STEP_PUSH_FP
1344:	STEP_CALL_SECONDARY
1345:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1346:	STEP_PRINT
1347:	STEP_CRLF
1348:	STEP_CONST
1349:	TEST fbool1(1) || fbool2(1) && fbool3(1)
1350:	STEP_PRINT
1351:	STEP_CRLF
1352:	STEP_CONST
1353:	1
1354:	STEP_PUSH_FP
1355:	STEP_CALL_SECONDARY
1356:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1357:	STEP_DUP
1358:	STEP_ZEQ
1359:	STEP_GOTO0
1360:	(16,)
1361:	STEP_DROP
1362:	STEP_CONST
1363:	1
1364:	STEP_PUSH_FP
1365:	STEP_CALL_SECONDARY
1366:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1367:	STEP_DUP
1368:	STEP_GOTO0
1369:	(7,)
1370:	STEP_DROP
1371:	STEP_CONST
1372:	1
1373:	STEP_PUSH_FP
1374:	STEP_CALL_SECONDARY
1375:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1376:	STEP_PRINT
1377:	STEP_CRLF
1378:	STEP_CONST
1379:	TEST fbool1(1) || fbool2(1) || fbool3(0)
1380:	STEP_PRINT
1381:	STEP_CRLF
1382:	STEP_CONST
1383:	1
1384:	STEP_PUSH_FP
1385:	STEP_CALL_SECONDARY
1386:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1387:	STEP_DUP
1388:	STEP_ZEQ
1389:	STEP_GOTO0
1390:	(17,)
1391:	STEP_DROP
1392:	STEP_CONST
1393:	1
1394:	STEP_PUSH_FP
1395:	STEP_CALL_SECONDARY
1396:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1397:	STEP_DUP
1398:	STEP_ZEQ
1399:	STEP_GOTO0
1400:	(7,)
1401:	STEP_DROP
1402:	STEP_CONST
1403:	0
1404:	STEP_PUSH_FP
1405:	STEP_CALL_SECONDARY
1406:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1407:	STEP_PRINT
1408:	STEP_CRLF
1409:	STEP_CONST
1410:	TEST fbool1(1) || fbool2(1) || fbool3(1)
1411:	STEP_PRINT
1412:	STEP_CRLF
1413:	STEP_CONST
1414:	1
1415:	STEP_PUSH_FP
1416:	STEP_CALL_SECONDARY
1417:	['func', 'fbool1', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1441]
1418:	STEP_DUP
1419:	STEP_ZEQ
1420:	STEP_GOTO0
1421:	(17,)
1422:	STEP_DROP
1423:	STEP_CONST
1424:	1
1425:	STEP_PUSH_FP
1426:	STEP_CALL_SECONDARY
1427:	['func', 'fbool2', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1469]
1428:	STEP_DUP
1429:	STEP_ZEQ
1430:	STEP_GOTO0
1431:	(7,)
1432:	STEP_DROP
1433:	STEP_CONST
1434:	1
1435:	STEP_PUSH_FP
1436:	STEP_CALL_SECONDARY
1437:	['func', 'fbool3', 'int', (('value', ('typedecl', 'int')),), {'#locals': 0, '#params': 1, '#depth': 1, 'value': ('var', 'value', 'int', -2), '#funcs': 0}, 1497]
1438:	STEP_PRINT
1439:	STEP_CRLF
1440:	STEP_PAUSE
1441*	FUNCTION outer scope::fbool1	***************
1441:	STEP_CONST
1442:	Value to fbool1:
1443:	STEP_PRINT
1444:	STEP_CRLF
1445:	STEP_PUSH_FP
1446:	STEP_CONST
1447:	-2
1448:	STEP_ADD
1449:	STEP_FETCH_STACK
1450:	STEP_PRINT
1451:	STEP_CRLF
1452:	STEP_PUSH_FP
1453:	STEP_CONST
1454:	-2
1455:	STEP_ADD
1456:	STEP_FETCH_STACK
1457:	STEP_CONST
1458:	0
1459:	STEP_STORE
1460:	STEP_CONST
1461:	-2
1462:	STEP_CONST
1463:	-1
1464:	STEP_DROPFRAME
1465:	STEP_CONST
1466:	0
1467:	STEP_FETCH
1468:	STEP_RETURN
1469*	FUNCTION outer scope::fbool2	***************
1469:	STEP_CONST
1470:	Value to fbool2:
1471:	STEP_PRINT
1472:	STEP_CRLF
1473:	STEP_PUSH_FP
1474:	STEP_CONST
1475:	-2
1476:	STEP_ADD
1477:	STEP_FETCH_STACK
1478:	STEP_PRINT
1479:	STEP_CRLF
1480:	STEP_PUSH_FP
1481:	STEP_CONST
1482:	-2
1483:	STEP_ADD
1484:	STEP_FETCH_STACK
1485:	STEP_CONST
1486:	0
1487:	STEP_STORE
1488:	STEP_CONST
1489:	-2
1490:	STEP_CONST
1491:	-1
1492:	STEP_DROPFRAME
1493:	STEP_CONST
1494:	0
1495:	STEP_FETCH
1496:	STEP_RETURN
1497*	FUNCTION outer scope::fbool3	***************
1497:	STEP_CONST
1498:	Value to fbool3:
1499:	STEP_PRINT
1500:	STEP_CRLF
1501:	STEP_PUSH_FP
1502:	STEP_CONST
1503:	-2
1504:	STEP_ADD
1505:	STEP_FETCH_STACK
1506:	STEP_PRINT
1507:	STEP_CRLF
1508:	STEP_PUSH_FP
1509:	STEP_CONST
1510:	-2
1511:	STEP_ADD
1512:	STEP_FETCH_STACK
1513:	STEP_CONST
1514:	0
1515:	STEP_STORE
1516:	STEP_CONST
1517:	-2
1518:	STEP_CONST
1519:	-1
1520:	STEP_DROPFRAME
1521:	STEP_CONST
1522:	0
1523:	STEP_FETCH
1524:	STEP_RETURN
PROGRAM LINK AFTER BACKPATCHING:
0*	FUNCTION outermost scope	***************
0:	STEP_CONST
1:	TEST fbool1(0) && fbool2(0) && fbool3(0)
2:	STEP_PRINT
3:	STEP_CRLF
4:	STEP_CONST
5:	0
6:	STEP_PUSH_FP
7:	STEP_CALL_SECONDARY
8:	1441
9:	STEP_DUP
10:	STEP_GOTO0
11:	27
12:	STEP_DROP
13:	STEP_CONST
14:	0
15:	STEP_PUSH_FP
16:	STEP_CALL_SECONDARY
17:	1469
18:	STEP_DUP
19:	STEP_GOTO0
20:	27
21:	STEP_DROP
22:	STEP_CONST
23:	0
24:	STEP_PUSH_FP
25:	STEP_CALL_SECONDARY
26:	1497
27:	STEP_PRINT
28:	STEP_CRLF
29:	STEP_CONST
30:	TEST fbool1(0) && fbool2(0) && fbool3(1)
31:	STEP_PRINT
32:	STEP_CRLF
33:	STEP_CONST
34:	0
35:	STEP_PUSH_FP
36:	STEP_CALL_SECONDARY
37:	1441
38:	STEP_DUP
39:	STEP_GOTO0
40:	56
41:	STEP_DROP
42:	STEP_CONST
43:	0
44:	STEP_PUSH_FP
45:	STEP_CALL_SECONDARY
46:	1469
47:	STEP_DUP
48:	STEP_GOTO0
49:	56
50:	STEP_DROP
51:	STEP_CONST
52:	1
53:	STEP_PUSH_FP
54:	STEP_CALL_SECONDARY
55:	1497
56:	STEP_PRINT
57:	STEP_CRLF
58:	STEP_CONST
59:	TEST fbool1(0) && fbool2(1) && fbool3(0)
60:	STEP_PRINT
61:	STEP_CRLF
62:	STEP_CONST
63:	0
64:	STEP_PUSH_FP
65:	STEP_CALL_SECONDARY
66:	1441
67:	STEP_DUP
68:	STEP_GOTO0
69:	85
70:	STEP_DROP
71:	STEP_CONST
72:	1
73:	STEP_PUSH_FP
74:	STEP_CALL_SECONDARY
75:	1469
76:	STEP_DUP
77:	STEP_GOTO0
78:	85
79:	STEP_DROP
80:	STEP_CONST
81:	0
82:	STEP_PUSH_FP
83:	STEP_CALL_SECONDARY
84:	1497
85:	STEP_PRINT
86:	STEP_CRLF
87:	STEP_CONST
88:	TEST fbool1(0) && fbool2(1) && fbool3(1)
89:	STEP_PRINT
90:	STEP_CRLF
91:	STEP_CONST
92:	0
93:	STEP_PUSH_FP
94:	STEP_CALL_SECONDARY
95:	1441
96:	STEP_DUP
97:	STEP_GOTO0
98:	114
99:	STEP_DROP
100:	STEP_CONST
101:	1
102:	STEP_PUSH_FP
103:	STEP_CALL_SECONDARY
104:	1469
105:	STEP_DUP
106:	STEP_GOTO0
107:	114
108:	STEP_DROP
109:	STEP_CONST
110:	1
111:	STEP_PUSH_FP
112:	STEP_CALL_SECONDARY
113:	1497
114:	STEP_PRINT
115:	STEP_CRLF
116:	STEP_CONST
117:	TEST fbool1(1) && fbool2(0) && fbool3(0)
118:	STEP_PRINT
119:	STEP_CRLF
120:	STEP_CONST
121:	1
122:	STEP_PUSH_FP
123:	STEP_CALL_SECONDARY
124:	1441
125:	STEP_DUP
126:	STEP_GOTO0
127:	143
128:	STEP_DROP
129:	STEP_CONST
130:	0
131:	STEP_PUSH_FP
132:	STEP_CALL_SECONDARY
133:	1469
134:	STEP_DUP
135:	STEP_GOTO0
136:	143
137:	STEP_DROP
138:	STEP_CONST
139:	0
140:	STEP_PUSH_FP
141:	STEP_CALL_SECONDARY
142:	1497
143:	STEP_PRINT
144:	STEP_CRLF
145:	STEP_CONST
146:	TEST fbool1(1) && fbool2(0) && fbool3(1)
147:	STEP_PRINT
148:	STEP_CRLF
149:	STEP_CONST
150:	1
151:	STEP_PUSH_FP
152:	STEP_CALL_SECONDARY
153:	1441
154:	STEP_DUP
155:	STEP_GOTO0
156:	172
157:	STEP_DROP
158:	STEP_CONST
159:	0
160:	STEP_PUSH_FP
161:	STEP_CALL_SECONDARY
162:	1469
163:	STEP_DUP
164:	STEP_GOTO0
165:	172
166:	STEP_DROP
167:	STEP_CONST
168:	1
169:	STEP_PUSH_FP
170:	STEP_CALL_SECONDARY
171:	1497
172:	STEP_PRINT
173:	STEP_CRLF
174:	STEP_CONST
175:	TEST fbool1(1) && fbool2(1) && fbool3(0)
176:	STEP_PRINT
177:	STEP_CRLF
178:	STEP_CONST
179:	1
180:	STEP_PUSH_FP
181:	STEP_CALL_SECONDARY
182:	1441
183:	STEP_DUP
184:	STEP_GOTO0
185:	201
186:	STEP_DROP
187:	STEP_CONST
188:	1
189:	STEP_PUSH_FP
190:	STEP_CALL_SECONDARY
191:	1469
192:	STEP_DUP
193:	STEP_GOTO0
194:	201
195:	STEP_DROP
196:	STEP_CONST
197:	0
198:	STEP_PUSH_FP
199:	STEP_CALL_SECONDARY
200:	1497
201:	STEP_PRINT
202:	STEP_CRLF
203:	STEP_CONST
204:	TEST fbool1(1) && fbool2(1) && fbool3(1)
205:	STEP_PRINT
206:	STEP_CRLF
207:	STEP_CONST
208:	1
209:	STEP_PUSH_FP
210:	STEP_CALL_SECONDARY
211:	1441
212:	STEP_DUP
213:	STEP_GOTO0
214:	230
215:	STEP_DROP
216:	STEP_CONST
217:	1
218:	STEP_PUSH_FP
219:	STEP_CALL_SECONDARY
220:	1469
221:	STEP_DUP
222:	STEP_GOTO0
223:	230
224:	STEP_DROP
225:	STEP_CONST
226:	1
227:	STEP_PUSH_FP
228:	STEP_CALL_SECONDARY
229:	1497
230:	STEP_PRINT
231:	STEP_CRLF
232:	STEP_CONST
233:	TEST fbool1(0) || fbool2(0) || fbool3(0)
234:	STEP_PRINT
235:	STEP_CRLF
236:	STEP_CONST
237:	0
238:	STEP_PUSH_FP
239:	STEP_CALL_SECONDARY
240:	1441
241:	STEP_DUP
242:	STEP_ZEQ
243:	STEP_GOTO0
244:	261
245:	STEP_DROP
246:	STEP_CONST
247:	0
248:	STEP_PUSH_FP
249:	STEP_CALL_SECONDARY
250:	1469
251:	STEP_DUP
252:	STEP_ZEQ
253:	STEP_GOTO0
254:	261
255:	STEP_DROP
256:	STEP_CONST
257:	0
258:	STEP_PUSH_FP
259:	STEP_CALL_SECONDARY
260:	1497
261:	STEP_PRINT
262:	STEP_CRLF
263:	STEP_CONST
264:	TEST fbool1(0) || fbool2(0) || fbool3(1)
265:	STEP_PRINT
266:	STEP_CRLF
267:	STEP_CONST
268:	0
269:	STEP_PUSH_FP
270:	STEP_CALL_SECONDARY
271:	1441
272:	STEP_DUP
273:	STEP_ZEQ
274:	STEP_GOTO0
275:	292
276:	STEP_DROP
277:	STEP_CONST
278:	0
279:	STEP_PUSH_FP
280:	STEP_CALL_SECONDARY
281:	1469
282:	STEP_DUP
283:	STEP_ZEQ
284:	STEP_GOTO0
285:	292
286:	STEP_DROP
287:	STEP_CONST
288:	1
289:	STEP_PUSH_FP
290:	STEP_CALL_SECONDARY
291:	1497
292:	STEP_PRINT
293:	STEP_CRLF
294:	STEP_CONST
295:	TEST fbool1(0) || fbool2(1) || fbool3(0)
296:	STEP_PRINT
297:	STEP_CRLF
298:	STEP_CONST
299:	0
300:	STEP_PUSH_FP
301:	STEP_CALL_SECONDARY
302:	1441
303:	STEP_DUP
304:	STEP_ZEQ
305:	STEP_GOTO0
306:	323
307:	STEP_DROP
308:	STEP_CONST
309:	1
310:	STEP_PUSH_FP
311:	STEP_CALL_SECONDARY
312:	1469
313:	STEP_DUP
314:	STEP_ZEQ
315:	STEP_GOTO0
316:	323
317:	STEP_DROP
318:	STEP_CONST
319:	0
320:	STEP_PUSH_FP
321:	STEP_CALL_SECONDARY
322:	1497
323:	STEP_PRINT
324:	STEP_CRLF
325:	STEP_CONST
326:	TEST fbool1(0) || fbool2(1) || fbool3(1)
327:	STEP_PRINT
328:	STEP_CRLF
329:	STEP_CONST
330:	0
331:	STEP_PUSH_FP
332:	STEP_CALL_SECONDARY
333:	1441
334:	STEP_DUP
335:	STEP_ZEQ
336:	STEP_GOTO0
337:	354
338:	STEP_DROP
339:	STEP_CONST
340:	1
341:	STEP_PUSH_FP
342:	STEP_CALL_SECONDARY
343:	1469
344:	STEP_DUP
345:	STEP_ZEQ
346:	STEP_GOTO0
347:	354
348:	STEP_DROP
349:	STEP_CONST
350:	1
351:	STEP_PUSH_FP
352:	STEP_CALL_SECONDARY
353:	1497
354:	STEP_PRINT
355:	STEP_CRLF
356:	STEP_CONST
357:	TEST fbool1(1) || fbool2(0) || fbool3(0)
358:	STEP_PRINT
359:	STEP_CRLF
360:	STEP_CONST
361:	1
362:	STEP_PUSH_FP
363:	STEP_CALL_SECONDARY
364:	1441
365:	STEP_DUP
366:	STEP_ZEQ
367:	STEP_GOTO0
368:	385
369:	STEP_DROP
370:	STEP_CONST
371:	0
372:	STEP_PUSH_FP
373:	STEP_CALL_SECONDARY
374:	1469
375:	STEP_DUP
376:	STEP_ZEQ
377:	STEP_GOTO0
378:	385
379:	STEP_DROP
380:	STEP_CONST
381:	0
382:	STEP_PUSH_FP
383:	STEP_CALL_SECONDARY
384:	1497
385:	STEP_PRINT
386:	STEP_CRLF
387:	STEP_CONST
388:	TEST fbool1(1) || fbool2(0) || fbool3(1)
389:	STEP_PRINT
390:	STEP_CRLF
391:	STEP_CONST
392:	1
393:	STEP_PUSH_FP
394:	STEP_CALL_SECONDARY
395:	1441
396:	STEP_DUP
397:	STEP_ZEQ
398:	STEP_GOTO0
399:	416
400:	STEP_DROP
401:	STEP_CONST
402:	0
403:	STEP_PUSH_FP
404:	STEP_CALL_SECONDARY
405:	1469
406:	STEP_DUP
407:	STEP_ZEQ
408:	STEP_GOTO0
409:	416
410:	STEP_DROP
411:	STEP_CONST
412:	1
413:	STEP_PUSH_FP
414:	STEP_CALL_SECONDARY
415:	1497
416:	STEP_PRINT
417:	STEP_CRLF
418:	STEP_CONST
419:	TEST fbool1(1) || fbool2(1) || fbool3(0)
420:	STEP_PRINT
421:	STEP_CRLF
422:	STEP_CONST
423:	1
424:	STEP_PUSH_FP
425:	STEP_CALL_SECONDARY
426:	1441
427:	STEP_DUP
428:	STEP_ZEQ
429:	STEP_GOTO0
430:	447
431:	STEP_DROP
432:	STEP_CONST
433:	1
434:	STEP_PUSH_FP
435:	STEP_CALL_SECONDARY
436:	1469
437:	STEP_DUP
438:	STEP_ZEQ
439:	STEP_GOTO0
440:	447
441:	STEP_DROP
442:	STEP_CONST
443:	0
444:	STEP_PUSH_FP
445:	STEP_CALL_SECONDARY
446:	1497
447:	STEP_PRINT
448:	STEP_CRLF
449:	STEP_CONST
450:	TEST fbool1(1) || fbool2(1) || fbool3(1)
451:	STEP_PRINT
452:	STEP_CRLF
453:	STEP_CONST
454:	1
455:	STEP_PUSH_FP
456:	STEP_CALL_SECONDARY
457:	1441
458:	STEP_DUP
459:	STEP_ZEQ
460:	STEP_GOTO0
461:	478
462:	STEP_DROP
463:	STEP_CONST
464:	1
465:	STEP_PUSH_FP
466:	STEP_CALL_SECONDARY
467:	1469
468:	STEP_DUP
469:	STEP_ZEQ
470:	STEP_GOTO0
471:	478
472:	STEP_DROP
473:	STEP_CONST
474:	1
475:	STEP_PUSH_FP
476:	STEP_CALL_SECONDARY
477:	1497
478:	STEP_PRINT
479:	STEP_CRLF
480:	STEP_CONST
481:	TEST fbool1(0) && fbool2(0) && fbool3(0)
482:	STEP_PRINT
483:	STEP_CRLF
484:	STEP_CONST
485:	0
486:	STEP_PUSH_FP
487:	STEP_CALL_SECONDARY
488:	1441
489:	STEP_DUP
490:	STEP_GOTO0
491:	507
492:	STEP_DROP
493:	STEP_CONST
494:	0
495:	STEP_PUSH_FP
496:	STEP_CALL_SECONDARY
497:	1469
498:	STEP_DUP
499:	STEP_GOTO0
500:	507
501:	STEP_DROP
502:	STEP_CONST
503:	0
504:	STEP_PUSH_FP
505:	STEP_CALL_SECONDARY
506:	1497
507:	STEP_PRINT
508:	STEP_CRLF
509:	STEP_CONST
510:	TEST fbool1(0) && fbool2(0) && fbool3(1)
511:	STEP_PRINT
512:	STEP_CRLF
513:	STEP_CONST
514:	0
515:	STEP_PUSH_FP
516:	STEP_CALL_SECONDARY
517:	1441
518:	STEP_DUP
519:	STEP_GOTO0
520:	536
521:	STEP_DROP
522:	STEP_CONST
523:	0
524:	STEP_PUSH_FP
525:	STEP_CALL_SECONDARY
526:	1469
527:	STEP_DUP
528:	STEP_GOTO0
529:	536
530:	STEP_DROP
531:	STEP_CONST
532:	1
533:	STEP_PUSH_FP
534:	STEP_CALL_SECONDARY
535:	1497
536:	STEP_PRINT
537:	STEP_CRLF
538:	STEP_CONST
539:	TEST fbool1(0) && fbool2(0) || fbool3(0)
540:	STEP_PRINT
541:	STEP_CRLF
542:	STEP_CONST
543:	0
544:	STEP_PUSH_FP
545:	STEP_CALL_SECONDARY
546:	1441
547:	STEP_DUP
548:	STEP_GOTO0
549:	556
550:	STEP_DROP
551:	STEP_CONST
552:	0
553:	STEP_PUSH_FP
554:	STEP_CALL_SECONDARY
555:	1469
556:	STEP_DUP
557:	STEP_ZEQ
558:	STEP_GOTO0
559:	566
560:	STEP_DROP
561:	STEP_CONST
562:	0
563:	STEP_PUSH_FP
564:	STEP_CALL_SECONDARY
565:	1497
566:	STEP_PRINT
567:	STEP_CRLF
568:	STEP_CONST
569:	TEST fbool1(0) && fbool2(0) || fbool3(1)
570:	STEP_PRINT
571:	STEP_CRLF
572:	STEP_CONST
573:	0
574:	STEP_PUSH_FP
575:	STEP_CALL_SECONDARY
576:	1441
577:	STEP_DUP
578:	STEP_GOTO0
579:	586
580:	STEP_DROP
581:	STEP_CONST
582:	0
583:	STEP_PUSH_FP
584:	STEP_CALL_SECONDARY
585:	1469
586:	STEP_DUP
587:	STEP_ZEQ
588:	STEP_GOTO0
589:	596
590:	STEP_DROP
591:	STEP_CONST
592:	1
593:	STEP_PUSH_FP
594:	STEP_CALL_SECONDARY
595:	1497
596:	STEP_PRINT
597:	STEP_CRLF
598:	STEP_CONST
599:	TEST fbool1(0) && fbool2(1) && fbool3(0)
600:	STEP_PRINT
601:	STEP_CRLF
602:	STEP_CONST
603:	0
604:	STEP_PUSH_FP
605:	STEP_CALL_SECONDARY
606:	1441
607:	STEP_DUP
608:	STEP_GOTO0
609:	625
610:	STEP_DROP
611:	STEP_CONST
612:	1
613:	STEP_PUSH_FP
614:	STEP_CALL_SECONDARY
615:	1469
616:	STEP_DUP
617:	STEP_GOTO0
618:	625
619:	STEP_DROP
620:	STEP_CONST
621:	0
622:	STEP_PUSH_FP
623:	STEP_CALL_SECONDARY
624:	1497
625:	STEP_PRINT
626:	STEP_CRLF
627:	STEP_CONST
628:	TEST fbool1(0) && fbool2(1) && fbool3(1)
629:	STEP_PRINT
630:	STEP_CRLF
631:	STEP_CONST
632:	0
633:	STEP_PUSH_FP
634:	STEP_CALL_SECONDARY
635:	1441
636:	STEP_DUP
637:	STEP_GOTO0
638:	654
639:	STEP_DROP
640:	STEP_CONST
641:	1
642:	STEP_PUSH_FP
643:	STEP_CALL_SECONDARY
644:	1469
645:	STEP_DUP
646:	STEP_GOTO0
647:	654
648:	STEP_DROP
649:	STEP_CONST
650:	1
651:	STEP_PUSH_FP
652:	STEP_CALL_SECONDARY
653:	1497
654:	STEP_PRINT
655:	STEP_CRLF
656:	STEP_CONST
657:	TEST fbool1(0) && fbool2(1) || fbool3(0)
658:	STEP_PRINT
659:	STEP_CRLF
660:	STEP_CONST
661:	0
662:	STEP_PUSH_FP
663:	STEP_CALL_SECONDARY
664:	1441
665:	STEP_DUP
666:	STEP_GOTO0
667:	674
668:	STEP_DROP
669:	STEP_CONST
670:	1
671:	STEP_PUSH_FP
672:	STEP_CALL_SECONDARY
673:	1469
674:	STEP_DUP
675:	STEP_ZEQ
676:	STEP_GOTO0
677:	684
678:	STEP_DROP
679:	STEP_CONST
680:	0
681:	STEP_PUSH_FP
682:	STEP_CALL_SECONDARY
683:	1497
684:	STEP_PRINT
685:	STEP_CRLF
686:	STEP_CONST
687:	TEST fbool1(0) && fbool2(1) || fbool3(1)
688:	STEP_PRINT
689:	STEP_CRLF
690:	STEP_CONST
691:	0
692:	STEP_PUSH_FP
693:	STEP_CALL_SECONDARY
694:	1441
695:	STEP_DUP
696:	STEP_GOTO0
697:	704
698:	STEP_DROP
699:	STEP_CONST
700:	1
701:	STEP_PUSH_FP
702:	STEP_CALL_SECONDARY
703:	1469
704:	STEP_DUP
705:	STEP_ZEQ
706:	STEP_GOTO0
707:	714
708:	STEP_DROP
709:	STEP_CONST
710:	1
711:	STEP_PUSH_FP
712:	STEP_CALL_SECONDARY
713:	1497
714:	STEP_PRINT
715:	STEP_CRLF
716:	STEP_CONST
717:	TEST fbool1(0) || fbool2(0) && fbool3(0)
718:	STEP_PRINT
719:	STEP_CRLF
720:	STEP_CONST
721:	0
722:	STEP_PUSH_FP
723:	STEP_CALL_SECONDARY
724:	1441
725:	STEP_DUP
726:	STEP_ZEQ
727:	STEP_GOTO0
728:	744
729:	STEP_DROP
730:	STEP_CONST
731:	0
732:	STEP_PUSH_FP
733:	STEP_CALL_SECONDARY
734:	1469
735:	STEP_DUP
736:	STEP_GOTO0
737:	744
738:	STEP_DROP
739:	STEP_CONST
740:	0
741:	STEP_PUSH_FP
742:	STEP_CALL_SECONDARY
743:	1497
744:	STEP_PRINT
745:	STEP_CRLF
746:	STEP_CONST
747:	TEST fbool1(0) || fbool2(0) && fbool3(1)
748:	STEP_PRINT
749:	STEP_CRLF
750:	STEP_CONST
751:	0
752:	STEP_PUSH_FP
753:	STEP_CALL_SECONDARY
754:	1441
755:	STEP_DUP
756:	STEP_ZEQ
757:	STEP_GOTO0
758:	774
759:	STEP_DROP
760:	STEP_CONST
761:	0
762:	STEP_PUSH_FP
763:	STEP_CALL_SECONDARY
764:	1469
765:	STEP_DUP
766:	STEP_GOTO0
767:	774
768:	STEP_DROP
769:	STEP_CONST
770:	1
771:	STEP_PUSH_FP
772:	STEP_CALL_SECONDARY
773:	1497
774:	STEP_PRINT
775:	STEP_CRLF
776:	STEP_CONST
777:	TEST fbool1(0) || fbool2(0) || fbool3(0)
778:	STEP_PRINT
779:	STEP_CRLF
780:	STEP_CONST
781:	0
782:	STEP_PUSH_FP
783:	STEP_CALL_SECONDARY
784:	1441
785:	STEP_DUP
786:	STEP_ZEQ
787:	STEP_GOTO0
788:	805
789:	STEP_DROP
790:	STEP_CONST
791:	0
792:	STEP_PUSH_FP
793:	STEP_CALL_SECONDARY
794:	1469
795:	STEP_DUP
796:	STEP_ZEQ
797:	STEP_GOTO0
798:	805
799:	STEP_DROP
800:	STEP_CONST
801:	0
802:	STEP_PUSH_FP
803:	STEP_CALL_SECONDARY
804:	1497
805:	STEP_PRINT
806:	STEP_CRLF
807:	STEP_CONST
808:	TEST fbool1(0) || fbool2(0) || fbool3(1)
809:	STEP_PRINT
810:	STEP_CRLF
811:	STEP_CONST
812:	0
813:	STEP_PUSH_FP
814:	STEP_CALL_SECONDARY
815:	1441
816:	STEP_DUP
817:	STEP_ZEQ
818:	STEP_GOTO0
819:	836
820:	STEP_DROP
821:	STEP_CONST
822:	0
823:	STEP_PUSH_FP
824:	STEP_CALL_SECONDARY
825:	1469
826:	STEP_DUP
827:	STEP_ZEQ
828:	STEP_GOTO0
829:	836
830:	STEP_DROP
831:	STEP_CONST
832:	1
833:	STEP_PUSH_FP
834:	STEP_CALL_SECONDARY
835:	1497
836:	STEP_PRINT
837:	STEP_CRLF
838:	STEP_CONST
839:	TEST fbool1(0) || fbool2(1) && fbool3(0)
840:	STEP_PRINT
841:	STEP_CRLF
842:	STEP_CONST
843:	0
844:	STEP_PUSH_FP
845:	STEP_CALL_SECONDARY
846:	1441
847:	STEP_DUP
848:	STEP_ZEQ
849:	STEP_GOTO0
850:	866
851:	STEP_DROP
852:	STEP_CONST
853:	1
854:	STEP_PUSH_FP
855:	STEP_CALL_SECONDARY
856:	1469
857:	STEP_DUP
858:	STEP_GOTO0
859:	866
860:	STEP_DROP
861:	STEP_CONST
862:	0
863:	STEP_PUSH_FP
864:	STEP_CALL_SECONDARY
865:	1497
866:	STEP_PRINT
867:	STEP_CRLF
868:	STEP_CONST
869:	TEST fbool1(0) || fbool2(1) && fbool3(1)
870:	STEP_PRINT
871:	STEP_CRLF
872:	STEP_CONST
873:	0
874:	STEP_PUSH_FP
875:	STEP_CALL_SECONDARY
876:	1441
877:	STEP_DUP
878:	STEP_ZEQ
879:	STEP_GOTO0
880:	896
881:	STEP_DROP
882:	STEP_CONST
883:	1
884:	STEP_PUSH_FP
885:	STEP_CALL_SECONDARY
886:	1469
887:	STEP_DUP
888:	STEP_GOTO0
889:	896
890:	STEP_DROP
891:	STEP_CONST
892:	1
893:	STEP_PUSH_FP
894:	STEP_CALL_SECONDARY
895:	1497
896:	STEP_PRINT
897:	STEP_CRLF
898:	STEP_CONST
899:	TEST fbool1(0) || fbool2(1) || fbool3(0)
900:	STEP_PRINT
901:	STEP_CRLF
902:	STEP_CONST
903:	0
904:	STEP_PUSH_FP
905:	STEP_CALL_SECONDARY
906:	1441
907:	STEP_DUP
908:	STEP_ZEQ
909:	STEP_GOTO0
910:	927
911:	STEP_DROP
912:	STEP_CONST
913:	1
914:	STEP_PUSH_FP
915:	STEP_CALL_SECONDARY
916:	1469
917:	STEP_DUP
918:	STEP_ZEQ
919:	STEP_GOTO0
920:	927
921:	STEP_DROP
922:	STEP_CONST
923:	0
924:	STEP_PUSH_FP
925:	STEP_CALL_SECONDARY
926:	1497
927:	STEP_PRINT
928:	STEP_CRLF
929:	STEP_CONST
930:	TEST fbool1(0) || fbool2(1) || fbool3(1)
931:	STEP_PRINT
932:	STEP_CRLF
933:	STEP_CONST
934:	0
935:	STEP_PUSH_FP
936:	STEP_CALL_SECONDARY
937:	1441
938:	STEP_DUP
939:	STEP_ZEQ
940:	STEP_GOTO0
941:	958
942:	STEP_DROP
943:	STEP_CONST
944:	1
945:	STEP_PUSH_FP
946:	STEP_CALL_SECONDARY
947:	1469
948:	STEP_DUP
949:	STEP_ZEQ
950:	STEP_GOTO0
951:	958
952:	STEP_DROP
953:	STEP_CONST
954:	1
955:	STEP_PUSH_FP
956:	STEP_CALL_SECONDARY
957:	1497
958:	STEP_PRINT
959:	STEP_CRLF
960:	STEP_CONST
961:	TEST fbool1(1) && fbool2(0) && fbool3(0)
962:	STEP_PRINT
963:	STEP_CRLF
964:	STEP_CONST
965:	1
966:	STEP_PUSH_FP
967:	STEP_CALL_SECONDARY
968:	1441
969:	STEP_DUP
970:	STEP_GOTO0
971:	987
972:	STEP_DROP
973:	STEP_CONST
974:	0
975:	STEP_PUSH_FP
976:	STEP_CALL_SECONDARY
977:	1469
978:	STEP_DUP
979:	STEP_GOTO0
980:	987
981:	STEP_DROP
982:	STEP_CONST
983:	0
984:	STEP_PUSH_FP
985:	STEP_CALL_SECONDARY
986:	1497
987:	STEP_PRINT
988:	STEP_CRLF
989:	STEP_CONST
990:	TEST fbool1(1) && fbool2(0) && fbool3(1)
991:	STEP_PRINT
992:	STEP_CRLF
993:	STEP_CONST
994:	1
995:	STEP_PUSH_FP
996:	STEP_CALL_SECONDARY
997:	1441
998:	STEP_DUP
999:	STEP_GOTO0
1000:	1016
1001:	STEP_DROP
1002:	STEP_CONST
1003:	0
1004:	STEP_PUSH_FP
1005:	STEP_CALL_SECONDARY
1006:	1469
1007:	STEP_DUP
1008:	STEP_GOTO0
1009:	1016
1010:	STEP_DROP
1011:	STEP_CONST
1012:	1
1013:	STEP_PUSH_FP
1014:	STEP_CALL_SECONDARY
1015:	1497
1016:	STEP_PRINT
1017:	STEP_CRLF
1018:	STEP_CONST
1019:	TEST fbool1(1) && fbool2(0) || fbool3(0)
1020:	STEP_PRINT
1021:	STEP_CRLF
1022:	STEP_CONST
1023:	1
1024:	STEP_PUSH_FP
1025:	STEP_CALL_SECONDARY
1026:	1441
1027:	STEP_DUP
1028:	STEP_GOTO0
1029:	1036
1030:	STEP_DROP
1031:	STEP_CONST
1032:	0
1033:	STEP_PUSH_FP
1034:	STEP_CALL_SECONDARY
1035:	1469
1036:	STEP_DUP
1037:	STEP_ZEQ
1038:	STEP_GOTO0
1039:	1046
1040:	STEP_DROP
1041:	STEP_CONST
1042:	0
1043:	STEP_PUSH_FP
1044:	STEP_CALL_SECONDARY
1045:	1497
1046:	STEP_PRINT
1047:	STEP_CRLF
1048:	STEP_CONST
1049:	TEST fbool1(1) && fbool2(0) || fbool3(1)
1050:	STEP_PRINT
1051:	STEP_CRLF
1052:	STEP_CONST
1053:	1
1054:	STEP_PUSH_FP
1055:	STEP_CALL_SECONDARY
1056:	1441
1057:	STEP_DUP
1058:	STEP_GOTO0
1059:	1066
1060:	STEP_DROP
1061:	STEP_CONST
1062:	0
1063:	STEP_PUSH_FP
1064:	STEP_CALL_SECONDARY
1065:	1469
1066:	STEP_DUP
1067:	STEP_ZEQ
1068:	STEP_GOTO0
1069:	1076
1070:	STEP_DROP
1071:	STEP_CONST
1072:	1
1073:	STEP_PUSH_FP
1074:	STEP_CALL_SECONDARY
1075:	1497
1076:	STEP_PRINT
1077:	STEP_CRLF
1078:	STEP_CONST
1079:	TEST fbool1(1) && fbool2(1) && fbool3(0)
1080:	STEP_PRINT
1081:	STEP_CRLF
1082:	STEP_CONST
1083:	1
1084:	STEP_PUSH_FP
1085:	STEP_CALL_SECONDARY
1086:	1441
1087:	STEP_DUP
1088:	STEP_GOTO0
1089:	1105
1090:	STEP_DROP
1091:	STEP_CONST
1092:	1
1093:	STEP_PUSH_FP
1094:	STEP_CALL_SECONDARY
1095:	1469
1096:	STEP_DUP
1097:	STEP_GOTO0
1098:	1105
1099:	STEP_DROP
1100:	STEP_CONST
1101:	0
1102:	STEP_PUSH_FP
1103:	STEP_CALL_SECONDARY
1104:	1497
1105:	STEP_PRINT
1106:	STEP_CRLF
1107:	STEP_CONST
1108:	TEST fbool1(1) && fbool2(1) && fbool3(1)
1109:	STEP_PRINT
1110:	STEP_CRLF
1111:	STEP_CONST
1112:	1
1113:	STEP_PUSH_FP
1114:	STEP_CALL_SECONDARY
1115:	1441
1116:	STEP_DUP
1117:	STEP_GOTO0
1118:	1134
1119:	STEP_DROP
1120:	STEP_CONST
1121:	1
1122:	STEP_PUSH_FP
1123:	STEP_CALL_SECONDARY
1124:	1469
1125:	STEP_DUP
1126:	STEP_GOTO0
1127:	1134
1128:	STEP_DROP
1129:	STEP_CONST
1130:	1
1131:	STEP_PUSH_FP
1132:	STEP_CALL_SECONDARY
1133:	1497
1134:	STEP_PRINT
1135:	STEP_CRLF
1136:	STEP_CONST
1137:	TEST fbool1(1) && fbool2(1) || fbool3(0)
1138:	STEP_PRINT
1139:	STEP_CRLF
1140:	STEP_CONST
1141:	1
1142:	STEP_PUSH_FP
1143:	STEP_CALL_SECONDARY
1144:	1441
1145:	STEP_DUP
1146:	STEP_GOTO0
1147:	1154
1148:	STEP_DROP
1149:	STEP_CONST
1150:	1
1151:	STEP_PUSH_FP
1152:	STEP_CALL_SECONDARY
1153:	1469
1154:	STEP_DUP
1155:	STEP_ZEQ
1156:	STEP_GOTO0
1157:	1164
1158:	STEP_DROP
1159:	STEP_CONST
1160:	0
1161:	STEP_PUSH_FP
1162:	STEP_CALL_SECONDARY
1163:	1497
1164:	STEP_PRINT
1165:	STEP_CRLF
1166:	STEP_CONST
1167:	TEST fbool1(1) && fbool2(1) || fbool3(1)
1168:	STEP_PRINT
1169:	STEP_CRLF
1170:	STEP_CONST
1171:	1
1172:	STEP_PUSH_FP
1173:	STEP_CALL_SECONDARY
1174:	1441
1175:	STEP_DUP
1176:	STEP_GOTO0
1177:	1184
1178:	STEP_DROP
1179:	STEP_CONST
1180:	1
1181:	STEP_PUSH_FP
1182:	STEP_CALL_SECONDARY
1183:	1469
1184:	STEP_DUP
1185:	STEP_ZEQ
1186:	STEP_GOTO0
1187:	1194
1188:	STEP_DROP
1189:	STEP_CONST
1190:	1
1191:	STEP_PUSH_FP
1192:	STEP_CALL_SECONDARY
1193:	1497
1194:	STEP_PRINT
1195:	STEP_CRLF
1196:	STEP_CONST
1197:	TEST fbool1(1) || fbool2(0) && fbool3(0)
1198:	STEP_PRINT
1199:	STEP_CRLF
1200:	STEP_CONST
1201:	1
1202:	STEP_PUSH_FP
1203:	STEP_CALL_SECONDARY
1204:	1441
1205:	STEP_DUP
1206:	STEP_ZEQ
1207:	STEP_GOTO0
1208:	1224
1209:	STEP_DROP
1210:	STEP_CONST
1211:	0
1212:	STEP_PUSH_FP
1213:	STEP_CALL_SECONDARY
1214:	1469
1215:	STEP_DUP
1216:	STEP_GOTO0
1217:	1224
1218:	STEP_DROP
1219:	STEP_CONST
1220:	0
1221:	STEP_PUSH_FP
1222:	STEP_CALL_SECONDARY
1223:	1497
1224:	STEP_PRINT
1225:	STEP_CRLF
1226:	STEP_CONST
1227:	TEST fbool1(1) || fbool2(0) && fbool3(1)
1228:	STEP_PRINT
1229:	STEP_CRLF
1230:	STEP_CONST
1231:	1
1232:	STEP_PUSH_FP
1233:	STEP_CALL_SECONDARY
1234:	1441
1235:	STEP_DUP
1236:	STEP_ZEQ
1237:	STEP_GOTO0
1238:	1254
1239:	STEP_DROP
1240:	STEP_CONST
1241:	0
1242:	STEP_PUSH_FP
1243:	STEP_CALL_SECONDARY
1244:	1469
1245:	STEP_DUP
1246:	STEP_GOTO0
1247:	1254
1248:	STEP_DROP
1249:	STEP_CONST
1250:	1
1251:	STEP_PUSH_FP
1252:	STEP_CALL_SECONDARY
1253:	1497
1254:	STEP_PRINT
1255:	STEP_CRLF
1256:	STEP_CONST
1257:	TEST fbool1(1) || fbool2(0) || fbool3(0)
1258:	STEP_PRINT
1259:	STEP_CRLF
1260:	STEP_CONST
1261:	1
1262:	STEP_PUSH_FP
1263:	STEP_CALL_SECONDARY
1264:	1441
1265:	STEP_DUP
1266:	STEP_ZEQ
1267:	STEP_GOTO0
1268:	1285
1269:	STEP_DROP
1270:	STEP_CONST
1271:	0
1272:	STEP_PUSH_FP
1273:	STEP_CALL_SECONDARY
1274:	1469
1275:	STEP_DUP
1276:	STEP_ZEQ
1277:	STEP_GOTO0
1278:	1285
1279:	STEP_DROP
1280:	STEP_CONST
1281:	0
1282:	STEP_PUSH_FP
1283:	STEP_CALL_SECONDARY
1284:	1497
1285:	STEP_PRINT
1286:	STEP_CRLF
1287:	STEP_CONST
1288:	TEST fbool1(1) || fbool2(0) || fbool3(1)
1289:	STEP_PRINT
1290:	STEP_CRLF
1291:	STEP_CONST
1292:	1
1293:	STEP_PUSH_FP
1294:	STEP_CALL_SECONDARY
1295:	1441
1296:	STEP_DUP
1297:	STEP_ZEQ
1298:	STEP_GOTO0
1299:	1316
1300:	STEP_DROP
1301:	STEP_CONST
1302:	0
1303:	STEP_PUSH_FP
1304:	STEP_CALL_SECONDARY
1305:	1469
1306:	STEP_DUP
1307:	STEP_ZEQ
1308:	STEP_GOTO0
1309:	1316
1310:	STEP_DROP
1311:	STEP_CONST
1312:	1
1313:	STEP_PUSH_FP
1314:	STEP_CALL_SECONDARY
1315:	1497
1316:	STEP_PRINT
1317:	STEP_CRLF
1318:	STEP_CONST
1319:	TEST fbool1(1) || fbool2(1) && fbool3(0)
1320:	STEP_PRINT
1321:	STEP_CRLF
1322:	STEP_CONST
1323:	1
1324:	STEP_PUSH_FP
1325:	STEP_CALL_SECONDARY
1326:	1441
1327:	STEP_DUP
1328:	STEP_ZEQ
1329:	STEP_GOTO0
1330:	1346
1331:	STEP_DROP
1332:	STEP_CONST
1333:	1
1334:	STEP_PUSH_FP
1335:	STEP_CALL_SECONDARY
1336:	1469
1337:	STEP_DUP
1338:	STEP_GOTO0
1339:	1346
1340:	STEP_DROP
1341:	STEP_CONST
1342:	0
1343:	STEP_PUSH_FP
1344:	STEP_CALL_SECONDARY
1345:	1497
1346:	STEP_PRINT
1347:	STEP_CRLF
1348:	STEP_CONST
1349:	TEST fbool1(1) || fbool2(1) && fbool3(1)
1350:	STEP_PRINT
1351:	STEP_CRLF
1352:	STEP_CONST
1353:	1
1354:	STEP_PUSH_FP
1355:	STEP_CALL_SECONDARY
1356:	1441
1357:	STEP_DUP
1358:	STEP_ZEQ
1359:	STEP_GOTO0
1360:	1376
1361:	STEP_DROP
1362:	STEP_CONST
1363:	1
1364:	STEP_PUSH_FP
1365:	STEP_CALL_SECONDARY
1366:	1469
1367:	STEP_DUP
1368:	STEP_GOTO0
1369:	1376
1370:	STEP_DROP
1371:	STEP_CONST
1372:	1
1373:	STEP_PUSH_FP
1374:	STEP_CALL_SECONDARY
1375:	1497
1376:	STEP_PRINT
1377:	STEP_CRLF
1378:	STEP_CONST
1379:	TEST fbool1(1) || fbool2(1) || fbool3(0)
1380:	STEP_PRINT
1381:	STEP_CRLF
1382:	STEP_CONST
1383:	1
1384:	STEP_PUSH_FP
1385:	STEP_CALL_SECONDARY
1386:	1441
1387:	STEP_DUP
1388:	STEP_ZEQ
1389:	STEP_GOTO0
1390:	1407
1391:	STEP_DROP
1392:	STEP_CONST
1393:	1
1394:	STEP_PUSH_FP
1395:	STEP_CALL_SECONDARY
1396:	1469
1397:	STEP_DUP
1398:	STEP_ZEQ
1399:	STEP_GOTO0
1400:	1407
1401:	STEP_DROP
1402:	STEP_CONST
1403:	0
1404:	STEP_PUSH_FP
1405:	STEP_CALL_SECONDARY
1406:	1497
1407:	STEP_PRINT
1408:	STEP_CRLF
1409:	STEP_CONST
1410:	TEST fbool1(1) || fbool2(1) || fbool3(1)
1411:	STEP_PRINT
1412:	STEP_CRLF
1413:	STEP_CONST
1414:	1
1415:	STEP_PUSH_FP
1416:	STEP_CALL_SECONDARY
1417:	1441
1418:	STEP_DUP
1419:	STEP_ZEQ
1420:	STEP_GOTO0
1421:	1438
1422:	STEP_DROP
1423:	STEP_CONST
1424:	1
1425:	STEP_PUSH_FP
1426:	STEP_CALL_SECONDARY
1427:	1469
1428:	STEP_DUP
1429:	STEP_ZEQ
1430:	STEP_GOTO0
1431:	1438
1432:	STEP_DROP
1433:	STEP_CONST
1434:	1
1435:	STEP_PUSH_FP
1436:	STEP_CALL_SECONDARY
1437:	1497
1438:	STEP_PRINT
1439:	STEP_CRLF
1440:	STEP_PAUSE
1441*	FUNCTION outer scope::fbool1	***************
1441:	STEP_CONST
1442:	Value to fbool1:
1443:	STEP_PRINT
1444:	STEP_CRLF
1445:	STEP_PUSH_FP
1446:	STEP_CONST
1447:	-2
1448:	STEP_ADD
1449:	STEP_FETCH_STACK
1450:	STEP_PRINT
1451:	STEP_CRLF
1452:	STEP_PUSH_FP
1453:	STEP_CONST
1454:	-2
1455:	STEP_ADD
1456:	STEP_FETCH_STACK
1457:	STEP_CONST
1458:	0
1459:	STEP_STORE
1460:	STEP_CONST
1461:	-2
1462:	STEP_CONST
1463:	-1
1464:	STEP_DROPFRAME
1465:	STEP_CONST
1466:	0
1467:	STEP_FETCH
1468:	STEP_RETURN
1469*	FUNCTION outer scope::fbool2	***************
1469:	STEP_CONST
1470:	Value to fbool2:
1471:	STEP_PRINT
1472:	STEP_CRLF
1473:	STEP_PUSH_FP
1474:	STEP_CONST
1475:	-2
1476:	STEP_ADD
1477:	STEP_FETCH_STACK
1478:	STEP_PRINT
1479:	STEP_CRLF
1480:	STEP_PUSH_FP
1481:	STEP_CONST
1482:	-2
1483:	STEP_ADD
1484:	STEP_FETCH_STACK
1485:	STEP_CONST
1486:	0
1487:	STEP_STORE
1488:	STEP_CONST
1489:	-2
1490:	STEP_CONST
1491:	-1
1492:	STEP_DROPFRAME
1493:	STEP_CONST
1494:	0
1495:	STEP_FETCH
1496:	STEP_RETURN
1497*	FUNCTION outer scope::fbool3	***************
1497:	STEP_CONST
1498:	Value to fbool3:
1499:	STEP_PRINT
1500:	STEP_CRLF
1501:	STEP_PUSH_FP
1502:	STEP_CONST
1503:	-2
1504:	STEP_ADD
1505:	STEP_FETCH_STACK
1506:	STEP_PRINT
1507:	STEP_CRLF
1508:	STEP_PUSH_FP
1509:	STEP_CONST
1510:	-2
1511:	STEP_ADD
1512:	STEP_FETCH_STACK
1513:	STEP_CONST
1514:	0
1515:	STEP_STORE
1516:	STEP_CONST
1517:	-2
1518:	STEP_CONST
1519:	-1
1520:	STEP_DROPFRAME
1521:	STEP_CONST
1522:	0
1523:	STEP_FETCH
1524:	STEP_RETURN
UNINTERPRETED DUMP OF THE ENTIRE DATA_DICTIONARY:
[1, None, 4, 9223372036854775807, 0, 4]
DEBUG HEAP: size of data_dictionary = 6.
DEBUG HEAP: free list pointer at location 1 = None.
DEBUG HEAP @ 2: HDR=4|RFC=9223372036854775807|0|4
FOOTER@5 = 4.
